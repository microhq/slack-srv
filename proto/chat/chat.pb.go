// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/micro/slack-srv/proto/chat/chat.proto

/*
Package go_micro_srv_slack is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/slack-srv/proto/chat/chat.proto

It has these top-level messages:
	DeleteRequest
	DeleteResponse
	PostMessageRequest
	PostMessageResponse
	UpdateRequest
	UpdateResponse
*/
package go_micro_srv_slack

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_micro_srv_slack1 "github.com/micro/slack-srv/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeleteRequest struct {
	Ts      float64 `protobuf:"fixed64,1,opt,name=ts" json:"ts,omitempty"`
	Channel string  `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeleteRequest) GetTs() float64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *DeleteRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

type DeleteResponse struct {
	Ok      bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Channel string `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
	Ts      string `protobuf:"bytes,4,opt,name=ts" json:"ts,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DeleteResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *DeleteResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *DeleteResponse) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *DeleteResponse) GetTs() string {
	if m != nil {
		return m.Ts
	}
	return ""
}

type PostMessageRequest struct {
	Channel     string `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Text        string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Username    string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	AsUser      bool   `protobuf:"varint,4,opt,name=as_user,json=asUser" json:"as_user,omitempty"`
	Parse       string `protobuf:"bytes,5,opt,name=parse" json:"parse,omitempty"`
	LinkNames   int64  `protobuf:"varint,6,opt,name=link_names,json=linkNames" json:"link_names,omitempty"`
	Attachments string `protobuf:"bytes,7,opt,name=attachments" json:"attachments,omitempty"`
	UnfurlLinks bool   `protobuf:"varint,8,opt,name=unfurl_links,json=unfurlLinks" json:"unfurl_links,omitempty"`
	UnfurlMedia bool   `protobuf:"varint,9,opt,name=unfurl_media,json=unfurlMedia" json:"unfurl_media,omitempty"`
	IconUrl     string `protobuf:"bytes,10,opt,name=icon_url,json=iconUrl" json:"icon_url,omitempty"`
	IconEmoji   string `protobuf:"bytes,11,opt,name=icon_emoji,json=iconEmoji" json:"icon_emoji,omitempty"`
}

func (m *PostMessageRequest) Reset()                    { *m = PostMessageRequest{} }
func (m *PostMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*PostMessageRequest) ProtoMessage()               {}
func (*PostMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PostMessageRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *PostMessageRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *PostMessageRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *PostMessageRequest) GetAsUser() bool {
	if m != nil {
		return m.AsUser
	}
	return false
}

func (m *PostMessageRequest) GetParse() string {
	if m != nil {
		return m.Parse
	}
	return ""
}

func (m *PostMessageRequest) GetLinkNames() int64 {
	if m != nil {
		return m.LinkNames
	}
	return 0
}

func (m *PostMessageRequest) GetAttachments() string {
	if m != nil {
		return m.Attachments
	}
	return ""
}

func (m *PostMessageRequest) GetUnfurlLinks() bool {
	if m != nil {
		return m.UnfurlLinks
	}
	return false
}

func (m *PostMessageRequest) GetUnfurlMedia() bool {
	if m != nil {
		return m.UnfurlMedia
	}
	return false
}

func (m *PostMessageRequest) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

func (m *PostMessageRequest) GetIconEmoji() string {
	if m != nil {
		return m.IconEmoji
	}
	return ""
}

type PostMessageResponse struct {
	Ok      bool                         `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error   string                       `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Ts      string                       `protobuf:"bytes,3,opt,name=ts" json:"ts,omitempty"`
	Channel string                       `protobuf:"bytes,4,opt,name=channel" json:"channel,omitempty"`
	Message *go_micro_srv_slack1.Message `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
}

func (m *PostMessageResponse) Reset()                    { *m = PostMessageResponse{} }
func (m *PostMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*PostMessageResponse) ProtoMessage()               {}
func (*PostMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PostMessageResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *PostMessageResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *PostMessageResponse) GetTs() string {
	if m != nil {
		return m.Ts
	}
	return ""
}

func (m *PostMessageResponse) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *PostMessageResponse) GetMessage() *go_micro_srv_slack1.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type UpdateRequest struct {
	Ts          float64 `protobuf:"fixed64,1,opt,name=ts" json:"ts,omitempty"`
	Channel     string  `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
	Text        string  `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	Attachments string  `protobuf:"bytes,4,opt,name=attachments" json:"attachments,omitempty"`
	Parse       string  `protobuf:"bytes,5,opt,name=parse" json:"parse,omitempty"`
	LinkNames   int64   `protobuf:"varint,6,opt,name=link_names,json=linkNames" json:"link_names,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateRequest) GetTs() float64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *UpdateRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *UpdateRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *UpdateRequest) GetAttachments() string {
	if m != nil {
		return m.Attachments
	}
	return ""
}

func (m *UpdateRequest) GetParse() string {
	if m != nil {
		return m.Parse
	}
	return ""
}

func (m *UpdateRequest) GetLinkNames() int64 {
	if m != nil {
		return m.LinkNames
	}
	return 0
}

type UpdateResponse struct {
	Ok      bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Channel string `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
	Ts      string `protobuf:"bytes,4,opt,name=ts" json:"ts,omitempty"`
	Text    string `protobuf:"bytes,5,opt,name=text" json:"text,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *UpdateResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *UpdateResponse) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *UpdateResponse) GetTs() string {
	if m != nil {
		return m.Ts
	}
	return ""
}

func (m *UpdateResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*DeleteRequest)(nil), "go.micro.srv.slack.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "go.micro.srv.slack.DeleteResponse")
	proto.RegisterType((*PostMessageRequest)(nil), "go.micro.srv.slack.PostMessageRequest")
	proto.RegisterType((*PostMessageResponse)(nil), "go.micro.srv.slack.PostMessageResponse")
	proto.RegisterType((*UpdateRequest)(nil), "go.micro.srv.slack.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "go.micro.srv.slack.UpdateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chat service

type ChatClient interface {
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	PostMessage(ctx context.Context, in *PostMessageRequest, opts ...grpc.CallOption) (*PostMessageResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.Chat/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) PostMessage(ctx context.Context, in *PostMessageRequest, opts ...grpc.CallOption) (*PostMessageResponse, error) {
	out := new(PostMessageResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.Chat/PostMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.Chat/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chat service

type ChatServer interface {
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	PostMessage(context.Context, *PostMessageRequest) (*PostMessageResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.Chat/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_PostMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).PostMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.Chat/PostMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).PostMessage(ctx, req.(*PostMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.Chat/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.srv.slack.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _Chat_Delete_Handler,
		},
		{
			MethodName: "PostMessage",
			Handler:    _Chat_PostMessage_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Chat_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/micro/slack-srv/proto/chat/chat.proto",
}

func init() { proto.RegisterFile("github.com/micro/slack-srv/proto/chat/chat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0x1d, 0xc7, 0x71, 0xc6, 0x34, 0x87, 0x05, 0x89, 0x25, 0x08, 0x29, 0xf5, 0x01, 0x72,
	0xa9, 0x83, 0x8a, 0x38, 0x70, 0x06, 0x6e, 0x14, 0x51, 0x4b, 0x39, 0xa7, 0x5b, 0x77, 0x89, 0x4d,
	0x6c, 0x6f, 0xd8, 0x59, 0x57, 0x7c, 0x05, 0x5f, 0xc0, 0x91, 0xef, 0xe1, 0x9b, 0xd0, 0xee, 0xc6,
	0xc6, 0x26, 0x11, 0x15, 0x95, 0x7a, 0x89, 0x32, 0x6f, 0xe7, 0xcd, 0xbc, 0x9d, 0x37, 0x6b, 0x78,
	0xb9, 0xce, 0x55, 0x56, 0x5f, 0xc5, 0xa9, 0x28, 0x17, 0x65, 0x9e, 0x4a, 0xb1, 0xc0, 0x82, 0xa5,
	0x9b, 0x53, 0x94, 0x37, 0x8b, 0xad, 0x14, 0x4a, 0x2c, 0xd2, 0x8c, 0x29, 0xf3, 0x13, 0x9b, 0x98,
	0x90, 0xb5, 0x88, 0x4d, 0x66, 0x8c, 0xf2, 0x26, 0x36, 0xd9, 0xd3, 0xd3, 0xdb, 0xab, 0x88, 0xb2,
	0x14, 0x95, 0x2d, 0x11, 0xbd, 0x81, 0xe3, 0x77, 0xbc, 0xe0, 0x8a, 0x27, 0xfc, 0x6b, 0xcd, 0x51,
	0x91, 0x09, 0xb8, 0x0a, 0xa9, 0x33, 0x73, 0xe6, 0x4e, 0xe2, 0x2a, 0x24, 0x14, 0x46, 0x69, 0xc6,
	0xaa, 0x8a, 0x17, 0xd4, 0x9d, 0x39, 0xf3, 0x71, 0xd2, 0x84, 0xd1, 0x25, 0x4c, 0x1a, 0x2a, 0x6e,
	0x45, 0x85, 0x5c, 0x73, 0xc5, 0xc6, 0x70, 0x83, 0xc4, 0x15, 0x1b, 0xf2, 0x08, 0x86, 0x5c, 0x4a,
	0x21, 0x77, 0x4c, 0x1b, 0x74, 0x2b, 0x0e, 0x7a, 0x15, 0x77, 0xbd, 0x3d, 0x03, 0xba, 0x0a, 0xa3,
	0x5f, 0x2e, 0x90, 0x4f, 0x02, 0xd5, 0x39, 0x47, 0x64, 0xeb, 0x56, 0x62, 0xa7, 0x80, 0xd3, 0x2f,
	0x40, 0xc0, 0x53, 0xfc, 0x9b, 0xda, 0xf5, 0x33, 0xff, 0xc9, 0x14, 0x82, 0x1a, 0xb9, 0xac, 0x58,
	0xc9, 0x77, 0xfd, 0xda, 0x98, 0x3c, 0x86, 0x11, 0xc3, 0x95, 0x0e, 0x4d, 0xd7, 0x20, 0xf1, 0x19,
	0x2e, 0x91, 0x4b, 0xad, 0x7c, 0xcb, 0x24, 0x72, 0x3a, 0xb4, 0xca, 0x4d, 0x40, 0x9e, 0x01, 0x14,
	0x79, 0xb5, 0x59, 0x69, 0x2e, 0x52, 0x7f, 0xe6, 0xcc, 0x07, 0xc9, 0x58, 0x23, 0x1f, 0x35, 0x40,
	0x66, 0x10, 0x32, 0xa5, 0x58, 0x9a, 0x95, 0xbc, 0x52, 0x48, 0x47, 0x86, 0xda, 0x85, 0xc8, 0x09,
	0x3c, 0xa8, 0xab, 0xcf, 0xb5, 0x2c, 0x56, 0x9a, 0x85, 0x34, 0x30, 0x4d, 0x43, 0x8b, 0x7d, 0xd0,
	0x50, 0x27, 0xa5, 0xe4, 0xd7, 0x39, 0xa3, 0xe3, 0x6e, 0xca, 0xb9, 0x86, 0xc8, 0x13, 0x08, 0xf2,
	0x54, 0x54, 0xab, 0x5a, 0x16, 0x14, 0xec, 0x00, 0x74, 0xbc, 0x94, 0x85, 0x56, 0x68, 0x8e, 0x78,
	0x29, 0xbe, 0xe4, 0x34, 0x34, 0x87, 0x63, 0x8d, 0xbc, 0xd7, 0x40, 0xf4, 0xc3, 0x81, 0x87, 0xbd,
	0x81, 0xfe, 0x97, 0x71, 0xd6, 0x9e, 0x41, 0x63, 0x4f, 0xd7, 0x07, 0xaf, 0xef, 0xc3, 0x6b, 0x18,
	0x95, 0xb6, 0x85, 0x19, 0x60, 0x78, 0xf6, 0x34, 0xde, 0x5f, 0xd5, 0xb8, 0x51, 0xd1, 0xe4, 0x46,
	0x3f, 0x1d, 0x38, 0x5e, 0x6e, 0xaf, 0xd9, 0x1d, 0xb6, 0xb1, 0xb5, 0x7e, 0xd0, 0xb1, 0xfe, 0x2f,
	0x43, 0xbc, 0x7d, 0x43, 0xee, 0xe2, 0x73, 0xa4, 0x60, 0xd2, 0xa8, 0xbc, 0x9f, 0xc5, 0x6f, 0x2f,
	0x33, 0xfc, 0x73, 0x99, 0xb3, 0xef, 0x2e, 0x78, 0x6f, 0x33, 0xa6, 0xc8, 0x05, 0xf8, 0xf6, 0xdd,
	0x91, 0x93, 0x43, 0x53, 0xed, 0x3d, 0xe7, 0x69, 0xf4, 0xaf, 0x14, 0xab, 0x3e, 0x3a, 0x22, 0x97,
	0x10, 0x76, 0xd6, 0x82, 0x3c, 0x3f, 0x44, 0xda, 0x7f, 0x88, 0xd3, 0x17, 0xb7, 0xe6, 0xb5, 0x1d,
	0x2e, 0xc0, 0xb7, 0x33, 0x3b, 0x2c, 0xba, 0xe7, 0xfa, 0x61, 0xd1, 0xfd, 0x91, 0x47, 0x47, 0x57,
	0xbe, 0xf9, 0x82, 0xbd, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xed, 0xfa, 0x23, 0x38, 0x05,
	0x00, 0x00,
}
