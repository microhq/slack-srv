// Code generated by protoc-gen-go.
// source: github.com/micro/slack-srv/proto/chat/chat.proto
// DO NOT EDIT!

/*
Package go_micro_srv_slack is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/slack-srv/proto/chat/chat.proto

It has these top-level messages:
	DeleteRequest
	DeleteResponse
	PostMessageRequest
	PostMessageResponse
	UpdateRequest
	UpdateResponse
*/
package go_micro_srv_slack

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_micro_srv_slack1 "github.com/micro/slack-srv/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DeleteRequest struct {
	Ts      float64 `protobuf:"fixed64,1,opt,name=ts" json:"ts,omitempty"`
	Channel string  `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DeleteResponse struct {
	Ok      bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Channel string `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
	Ts      string `protobuf:"bytes,3,opt,name=ts" json:"ts,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PostMessageRequest struct {
	Channel     string `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Text        string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Username    string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	AsUser      bool   `protobuf:"varint,4,opt,name=as_user" json:"as_user,omitempty"`
	Parse       string `protobuf:"bytes,5,opt,name=parse" json:"parse,omitempty"`
	LinkNames   int64  `protobuf:"varint,6,opt,name=link_names" json:"link_names,omitempty"`
	Attachments string `protobuf:"bytes,7,opt,name=attachments" json:"attachments,omitempty"`
	UnfurlLinks bool   `protobuf:"varint,8,opt,name=unfurl_links" json:"unfurl_links,omitempty"`
	UnfurlMedia bool   `protobuf:"varint,9,opt,name=unfurl_media" json:"unfurl_media,omitempty"`
	IconUrl     string `protobuf:"bytes,10,opt,name=icon_url" json:"icon_url,omitempty"`
	IconEmoji   string `protobuf:"bytes,11,opt,name=icon_emoji" json:"icon_emoji,omitempty"`
}

func (m *PostMessageRequest) Reset()                    { *m = PostMessageRequest{} }
func (m *PostMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*PostMessageRequest) ProtoMessage()               {}
func (*PostMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type PostMessageResponse struct {
	Ok      bool                         `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Ts      string                       `protobuf:"bytes,2,opt,name=ts" json:"ts,omitempty"`
	Channel string                       `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
	Message *go_micro_srv_slack1.Message `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
}

func (m *PostMessageResponse) Reset()                    { *m = PostMessageResponse{} }
func (m *PostMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*PostMessageResponse) ProtoMessage()               {}
func (*PostMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PostMessageResponse) GetMessage() *go_micro_srv_slack1.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type UpdateRequest struct {
	Ts          float64 `protobuf:"fixed64,1,opt,name=ts" json:"ts,omitempty"`
	Channel     string  `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
	Text        string  `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	Attachments string  `protobuf:"bytes,4,opt,name=attachments" json:"attachments,omitempty"`
	Parse       string  `protobuf:"bytes,5,opt,name=parse" json:"parse,omitempty"`
	LinkNames   int64   `protobuf:"varint,6,opt,name=link_names" json:"link_names,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type UpdateResponse struct {
	Ok      bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Channel string `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
	Ts      string `protobuf:"bytes,3,opt,name=ts" json:"ts,omitempty"`
	Text    string `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*DeleteRequest)(nil), "go.micro.srv.slack.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "go.micro.srv.slack.DeleteResponse")
	proto.RegisterType((*PostMessageRequest)(nil), "go.micro.srv.slack.PostMessageRequest")
	proto.RegisterType((*PostMessageResponse)(nil), "go.micro.srv.slack.PostMessageResponse")
	proto.RegisterType((*UpdateRequest)(nil), "go.micro.srv.slack.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "go.micro.srv.slack.UpdateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Chat service

type ChatClient interface {
	Delete(ctx context.Context, in *DeleteRequest) (*DeleteResponse, error)
	PostMessage(ctx context.Context, in *PostMessageRequest) (*PostMessageResponse, error)
	Update(ctx context.Context, in *UpdateRequest) (*UpdateResponse, error)
}

type chatClient struct {
	c client.Client
}

func NewChatClient(c client.Client) ChatClient {
	if c == nil {
		c = client.NewClient()
	}
	return &chatClient{
		c: c,
	}
}

func (c *chatClient) Delete(ctx context.Context, in *DeleteRequest) (*DeleteResponse, error) {
	req := c.c.NewRequest("go.micro.srv.slack", "Chat.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) PostMessage(ctx context.Context, in *PostMessageRequest) (*PostMessageResponse, error) {
	req := c.c.NewRequest("go.micro.srv.slack", "Chat.PostMessage", in)
	out := new(PostMessageResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Update(ctx context.Context, in *UpdateRequest) (*UpdateResponse, error) {
	req := c.c.NewRequest("go.micro.srv.slack", "Chat.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chat service

type ChatServer interface {
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	PostMessage(context.Context, *PostMessageRequest, *PostMessageResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
}

func RegisterChatServer(s server.Server, srv ChatServer) {
	s.Handle(s.NewHandler(srv))
}

var fileDescriptor0 = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x53, 0xc1, 0xae, 0x93, 0x40,
	0x14, 0x7d, 0xf0, 0x78, 0x6d, 0xdf, 0xe5, 0xb5, 0x9a, 0xa9, 0x8b, 0x49, 0xdd, 0x28, 0x0b, 0x75,
	0xd1, 0x82, 0xa9, 0x2b, 0xd7, 0x9a, 0xb8, 0x32, 0x51, 0x13, 0xd7, 0x38, 0xa5, 0x63, 0x8b, 0x65,
	0x66, 0x90, 0x19, 0x8c, 0x5f, 0xe1, 0x37, 0xfa, 0x29, 0x0e, 0x77, 0x0a, 0x16, 0x4b, 0xac, 0x6e,
	0x48, 0x38, 0x9c, 0x7b, 0xcf, 0x3d, 0xe7, 0x5e, 0xe0, 0xf9, 0x2e, 0x37, 0xfb, 0x7a, 0x13, 0x67,
	0x4a, 0x24, 0x22, 0xcf, 0x2a, 0x95, 0xe8, 0x82, 0x65, 0x87, 0x95, 0xae, 0xbe, 0x25, 0x65, 0xa5,
	0x8c, 0x4a, 0xb2, 0x3d, 0x33, 0xf8, 0x88, 0xf1, 0x9d, 0x90, 0x9d, 0x8a, 0x91, 0x19, 0x5b, 0x4e,
	0x8c, 0xec, 0xc5, 0xea, 0x72, 0x17, 0x25, 0x84, 0x92, 0xae, 0x45, 0xb4, 0x84, 0xe9, 0x6b, 0x5e,
	0x70, 0xc3, 0x3f, 0xf0, 0xaf, 0x35, 0xd7, 0x86, 0x00, 0xf8, 0x46, 0x53, 0xef, 0x91, 0xf7, 0xcc,
	0x23, 0xf7, 0x60, 0x6c, 0xd5, 0xa4, 0xe4, 0x05, 0xf5, 0x2d, 0x70, 0x1b, 0xbd, 0x84, 0x59, 0xcb,
	0xd6, 0xa5, 0x92, 0x9a, 0x37, 0x74, 0x75, 0x40, 0xfa, 0xe4, 0x8c, 0x7e, 0xec, 0x75, 0x8d, 0xa5,
	0x3f, 0x3d, 0x20, 0xef, 0x94, 0x36, 0x6f, 0xb9, 0xd6, 0x6c, 0xd7, 0xc9, 0x9d, 0xd4, 0x78, 0x58,
	0x73, 0x07, 0x81, 0xe1, 0xdf, 0xcd, 0xb1, 0xc3, 0x7d, 0x98, 0xd4, 0x9a, 0x57, 0x92, 0x09, 0xee,
	0xfa, 0x34, 0x05, 0x4c, 0xa7, 0x0d, 0x48, 0x03, 0x54, 0x9d, 0xc2, 0x4d, 0xc9, 0x2a, 0xcd, 0xe9,
	0x0d, 0x7e, 0xb7, 0xa2, 0x45, 0x2e, 0x0f, 0x69, 0x53, 0xa2, 0xe9, 0xc8, 0x62, 0xd7, 0x64, 0x0e,
	0x21, 0x33, 0x86, 0x65, 0x7b, 0xc1, 0xa5, 0x1d, 0x68, 0x8c, 0xc4, 0x07, 0x70, 0x57, 0xcb, 0xcf,
	0x75, 0x55, 0xa4, 0x0d, 0x5f, 0xd3, 0x09, 0x76, 0xfb, 0x8d, 0x0a, 0xbe, 0xcd, 0x19, 0xbd, 0x45,
	0xd4, 0x8e, 0x91, 0x67, 0x4a, 0xa6, 0x16, 0xa7, 0xd0, 0xca, 0x20, 0xc2, 0x85, 0xfa, 0x92, 0xd3,
	0x10, 0x2d, 0x16, 0x30, 0xef, 0x39, 0x1c, 0x88, 0xc8, 0x25, 0xe2, 0xb7, 0x4e, 0x5a, 0xeb, 0xce,
	0xda, 0x12, 0xc6, 0xc2, 0xd5, 0xa2, 0xb5, 0x70, 0xfd, 0x30, 0x3e, 0x5f, 0x70, 0x7c, 0x6c, 0x1f,
	0x55, 0x30, 0xfd, 0x58, 0x6e, 0xd9, 0xbf, 0x6d, 0xae, 0x8b, 0xd5, 0x29, 0xfd, 0x11, 0x48, 0x80,
	0xe0, 0xe5, 0x20, 0xa3, 0x37, 0x30, 0x6b, 0x35, 0xff, 0x73, 0xff, 0xdd, 0x00, 0xa8, 0xb5, 0xfe,
	0xe1, 0x43, 0xf0, 0xca, 0x1e, 0x32, 0x79, 0x0f, 0x23, 0x77, 0x51, 0xe4, 0xf1, 0x90, 0xd9, 0xde,
	0x6d, 0x2e, 0xa2, 0xbf, 0x51, 0xdc, 0x40, 0xd1, 0x15, 0xf9, 0x04, 0xe1, 0xc9, 0x1a, 0xc8, 0x93,
	0xa1, 0xa2, 0xf3, 0x4b, 0x5c, 0x3c, 0xbd, 0xc8, 0xeb, 0x14, 0xec, 0xd0, 0x2e, 0x86, 0xe1, 0xa1,
	0x7b, 0x6b, 0x19, 0x1e, 0xba, 0x9f, 0x62, 0x74, 0xb5, 0x19, 0xe1, 0xef, 0xf8, 0xe2, 0x57, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xb1, 0x7f, 0xe3, 0x04, 0x05, 0x04, 0x00, 0x00,
}
