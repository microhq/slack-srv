// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/micro/slack-srv/proto/chat/chat.proto

/*
Package go_micro_srv_slack is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/slack-srv/proto/chat/chat.proto

It has these top-level messages:
	DeleteRequest
	DeleteResponse
	PostMessageRequest
	PostMessageResponse
	UpdateRequest
	UpdateResponse
*/
package go_micro_srv_slack

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/micro/slack-srv/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Chat service

type ChatService interface {
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	PostMessage(ctx context.Context, in *PostMessageRequest, opts ...client.CallOption) (*PostMessageResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
}

type chatService struct {
	c           client.Client
	serviceName string
}

func ChatServiceClient(serviceName string, c client.Client) ChatService {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.slack"
	}
	return &chatService{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *chatService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Chat.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) PostMessage(ctx context.Context, in *PostMessageRequest, opts ...client.CallOption) (*PostMessageResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Chat.PostMessage", in)
	out := new(PostMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Chat.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chat service

type ChatHandler interface {
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	PostMessage(context.Context, *PostMessageRequest, *PostMessageResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
}

func RegisterChatHandler(s server.Server, hdlr ChatHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Chat{hdlr}, opts...))
}

type Chat struct {
	ChatHandler
}

func (h *Chat) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.ChatHandler.Delete(ctx, in, out)
}

func (h *Chat) PostMessage(ctx context.Context, in *PostMessageRequest, out *PostMessageResponse) error {
	return h.ChatHandler.PostMessage(ctx, in, out)
}

func (h *Chat) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.ChatHandler.Update(ctx, in, out)
}
