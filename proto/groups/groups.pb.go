// Code generated by protoc-gen-go.
// source: github.com/micro/slack-srv/proto/groups/groups.proto
// DO NOT EDIT!

/*
Package go_micro_srv_slack_group is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/slack-srv/proto/groups/groups.proto

It has these top-level messages:
	Group
	CloseRequest
	CloseResponse
	HistoryRequest
	HistoryResponse
	InfoRequest
	InfoResponse
	ListRequest
	ListResponse
	MarkRequest
	MarkResponse
	OpenRequest
	OpenResponse
	SetPurposeRequest
	SetPurposeResponse
	SetTopicRequest
	SetTopicResponse
*/
package go_micro_srv_slack_group

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_micro_srv_slack "github.com/micro/slack-srv/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Group struct {
	Id                 string                      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name               string                      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	IsGroup            string                      `protobuf:"bytes,3,opt,name=is_group" json:"is_group,omitempty"`
	Created            int64                       `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
	Creator            int64                       `protobuf:"varint,5,opt,name=creator" json:"creator,omitempty"`
	IsArchived         bool                        `protobuf:"varint,6,opt,name=is_archived" json:"is_archived,omitempty"`
	Members            []string                    `protobuf:"bytes,7,rep,name=members" json:"members,omitempty"`
	Topic              *go_micro_srv_slack.Topic   `protobuf:"bytes,8,opt,name=topic" json:"topic,omitempty"`
	Purpose            *go_micro_srv_slack.Purpose `protobuf:"bytes,9,opt,name=purpose" json:"purpose,omitempty"`
	LatestRead         string                      `protobuf:"bytes,10,opt,name=latest_read" json:"latest_read,omitempty"`
	Latest             *go_micro_srv_slack.Message `protobuf:"bytes,11,opt,name=latest" json:"latest,omitempty"`
	UnreadCount        int64                       `protobuf:"varint,12,opt,name=unread_count" json:"unread_count,omitempty"`
	UnreadCountDisplay int64                       `protobuf:"varint,13,opt,name=unread_count_display" json:"unread_count_display,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Group) GetTopic() *go_micro_srv_slack.Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *Group) GetPurpose() *go_micro_srv_slack.Purpose {
	if m != nil {
		return m.Purpose
	}
	return nil
}

func (m *Group) GetLatest() *go_micro_srv_slack.Message {
	if m != nil {
		return m.Latest
	}
	return nil
}

type CloseRequest struct {
	Channel string `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *CloseRequest) Reset()                    { *m = CloseRequest{} }
func (m *CloseRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseRequest) ProtoMessage()               {}
func (*CloseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CloseResponse struct {
	Ok            bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error         string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	NoOp          bool   `protobuf:"varint,3,opt,name=no_op" json:"no_op,omitempty"`
	AlreadyClosed bool   `protobuf:"varint,4,opt,name=already_closed" json:"already_closed,omitempty"`
}

func (m *CloseResponse) Reset()                    { *m = CloseResponse{} }
func (m *CloseResponse) String() string            { return proto.CompactTextString(m) }
func (*CloseResponse) ProtoMessage()               {}
func (*CloseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type HistoryRequest struct {
	Channel   string  `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Latest    float64 `protobuf:"fixed64,2,opt,name=latest" json:"latest,omitempty"`
	Oldest    float64 `protobuf:"fixed64,3,opt,name=oldest" json:"oldest,omitempty"`
	Inclusive int64   `protobuf:"varint,4,opt,name=inclusive" json:"inclusive,omitempty"`
	Count     int64   `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	Unreads   int64   `protobuf:"varint,6,opt,name=unreads" json:"unreads,omitempty"`
}

func (m *HistoryRequest) Reset()                    { *m = HistoryRequest{} }
func (m *HistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*HistoryRequest) ProtoMessage()               {}
func (*HistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type HistoryResponse struct {
	Ok       bool                          `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error    string                        `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Latest   string                        `protobuf:"bytes,3,opt,name=latest" json:"latest,omitempty"`
	Messages []*go_micro_srv_slack.Message `protobuf:"bytes,4,rep,name=messages" json:"messages,omitempty"`
	HasMore  bool                          `protobuf:"varint,5,opt,name=has_more" json:"has_more,omitempty"`
}

func (m *HistoryResponse) Reset()                    { *m = HistoryResponse{} }
func (m *HistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*HistoryResponse) ProtoMessage()               {}
func (*HistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HistoryResponse) GetMessages() []*go_micro_srv_slack.Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type InfoRequest struct {
	Channel string `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *InfoRequest) Reset()                    { *m = InfoRequest{} }
func (m *InfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()               {}
func (*InfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type InfoResponse struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Group *Group `protobuf:"bytes,3,opt,name=group" json:"group,omitempty"`
}

func (m *InfoResponse) Reset()                    { *m = InfoResponse{} }
func (m *InfoResponse) String() string            { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()               {}
func (*InfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *InfoResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type ListRequest struct {
	ExcludeArchived int64 `protobuf:"varint,1,opt,name=exclude_archived" json:"exclude_archived,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ListResponse struct {
	Ok     bool     `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error  string   `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Groups []*Group `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListResponse) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type MarkRequest struct {
	Channel string  `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Ts      float64 `protobuf:"fixed64,2,opt,name=ts" json:"ts,omitempty"`
}

func (m *MarkRequest) Reset()                    { *m = MarkRequest{} }
func (m *MarkRequest) String() string            { return proto.CompactTextString(m) }
func (*MarkRequest) ProtoMessage()               {}
func (*MarkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type MarkResponse struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *MarkResponse) Reset()                    { *m = MarkResponse{} }
func (m *MarkResponse) String() string            { return proto.CompactTextString(m) }
func (*MarkResponse) ProtoMessage()               {}
func (*MarkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type OpenRequest struct {
	Channel string `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *OpenRequest) Reset()                    { *m = OpenRequest{} }
func (m *OpenRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenRequest) ProtoMessage()               {}
func (*OpenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type OpenResponse struct {
	Ok          bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error       string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	NoOp        bool   `protobuf:"varint,3,opt,name=no_op" json:"no_op,omitempty"`
	AlreadyOpen bool   `protobuf:"varint,4,opt,name=already_open" json:"already_open,omitempty"`
}

func (m *OpenResponse) Reset()                    { *m = OpenResponse{} }
func (m *OpenResponse) String() string            { return proto.CompactTextString(m) }
func (*OpenResponse) ProtoMessage()               {}
func (*OpenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type SetPurposeRequest struct {
	Channel string `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Purpose string `protobuf:"bytes,2,opt,name=purpose" json:"purpose,omitempty"`
}

func (m *SetPurposeRequest) Reset()                    { *m = SetPurposeRequest{} }
func (m *SetPurposeRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPurposeRequest) ProtoMessage()               {}
func (*SetPurposeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type SetPurposeResponse struct {
	Ok      bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Purpose string `protobuf:"bytes,3,opt,name=purpose" json:"purpose,omitempty"`
}

func (m *SetPurposeResponse) Reset()                    { *m = SetPurposeResponse{} }
func (m *SetPurposeResponse) String() string            { return proto.CompactTextString(m) }
func (*SetPurposeResponse) ProtoMessage()               {}
func (*SetPurposeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type SetTopicRequest struct {
	Channel string `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Topic   string `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
}

func (m *SetTopicRequest) Reset()                    { *m = SetTopicRequest{} }
func (m *SetTopicRequest) String() string            { return proto.CompactTextString(m) }
func (*SetTopicRequest) ProtoMessage()               {}
func (*SetTopicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type SetTopicResponse struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Topic string `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
}

func (m *SetTopicResponse) Reset()                    { *m = SetTopicResponse{} }
func (m *SetTopicResponse) String() string            { return proto.CompactTextString(m) }
func (*SetTopicResponse) ProtoMessage()               {}
func (*SetTopicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func init() {
	proto.RegisterType((*Group)(nil), "go.micro.srv.slack.group.Group")
	proto.RegisterType((*CloseRequest)(nil), "go.micro.srv.slack.group.CloseRequest")
	proto.RegisterType((*CloseResponse)(nil), "go.micro.srv.slack.group.CloseResponse")
	proto.RegisterType((*HistoryRequest)(nil), "go.micro.srv.slack.group.HistoryRequest")
	proto.RegisterType((*HistoryResponse)(nil), "go.micro.srv.slack.group.HistoryResponse")
	proto.RegisterType((*InfoRequest)(nil), "go.micro.srv.slack.group.InfoRequest")
	proto.RegisterType((*InfoResponse)(nil), "go.micro.srv.slack.group.InfoResponse")
	proto.RegisterType((*ListRequest)(nil), "go.micro.srv.slack.group.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "go.micro.srv.slack.group.ListResponse")
	proto.RegisterType((*MarkRequest)(nil), "go.micro.srv.slack.group.MarkRequest")
	proto.RegisterType((*MarkResponse)(nil), "go.micro.srv.slack.group.MarkResponse")
	proto.RegisterType((*OpenRequest)(nil), "go.micro.srv.slack.group.OpenRequest")
	proto.RegisterType((*OpenResponse)(nil), "go.micro.srv.slack.group.OpenResponse")
	proto.RegisterType((*SetPurposeRequest)(nil), "go.micro.srv.slack.group.SetPurposeRequest")
	proto.RegisterType((*SetPurposeResponse)(nil), "go.micro.srv.slack.group.SetPurposeResponse")
	proto.RegisterType((*SetTopicRequest)(nil), "go.micro.srv.slack.group.SetTopicRequest")
	proto.RegisterType((*SetTopicResponse)(nil), "go.micro.srv.slack.group.SetTopicResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Groups service

type GroupsClient interface {
	Close(ctx context.Context, in *CloseRequest) (*CloseResponse, error)
	History(ctx context.Context, in *HistoryRequest) (*HistoryResponse, error)
	Info(ctx context.Context, in *InfoRequest) (*InfoResponse, error)
	List(ctx context.Context, in *ListRequest) (*ListResponse, error)
	Mark(ctx context.Context, in *MarkRequest) (*MarkResponse, error)
	Open(ctx context.Context, in *OpenRequest) (*OpenResponse, error)
	SetPurpose(ctx context.Context, in *SetPurposeRequest) (*SetPurposeResponse, error)
	SetTopic(ctx context.Context, in *SetTopicRequest) (*SetTopicResponse, error)
}

type groupsClient struct {
	c           client.Client
	serviceName string
}

func NewGroupsClient(serviceName string, c client.Client) GroupsClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.slack.group"
	}
	return &groupsClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *groupsClient) Close(ctx context.Context, in *CloseRequest) (*CloseResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Groups.Close", in)
	out := new(CloseResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) History(ctx context.Context, in *HistoryRequest) (*HistoryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Groups.History", in)
	out := new(HistoryResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) Info(ctx context.Context, in *InfoRequest) (*InfoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Groups.Info", in)
	out := new(InfoResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) List(ctx context.Context, in *ListRequest) (*ListResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Groups.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) Mark(ctx context.Context, in *MarkRequest) (*MarkResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Groups.Mark", in)
	out := new(MarkResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) Open(ctx context.Context, in *OpenRequest) (*OpenResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Groups.Open", in)
	out := new(OpenResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) SetPurpose(ctx context.Context, in *SetPurposeRequest) (*SetPurposeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Groups.SetPurpose", in)
	out := new(SetPurposeResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) SetTopic(ctx context.Context, in *SetTopicRequest) (*SetTopicResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Groups.SetTopic", in)
	out := new(SetTopicResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Groups service

type GroupsHandler interface {
	Close(context.Context, *CloseRequest, *CloseResponse) error
	History(context.Context, *HistoryRequest, *HistoryResponse) error
	Info(context.Context, *InfoRequest, *InfoResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
	Mark(context.Context, *MarkRequest, *MarkResponse) error
	Open(context.Context, *OpenRequest, *OpenResponse) error
	SetPurpose(context.Context, *SetPurposeRequest, *SetPurposeResponse) error
	SetTopic(context.Context, *SetTopicRequest, *SetTopicResponse) error
}

func RegisterGroupsHandler(s server.Server, hdlr GroupsHandler) {
	s.Handle(s.NewHandler(hdlr))
}

var fileDescriptor0 = []byte{
	// 748 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0x4b, 0x6f, 0xd3, 0x4c,
	0x14, 0xfd, 0xd2, 0xd4, 0x89, 0x7b, 0xed, 0x34, 0xed, 0x7c, 0x15, 0x1a, 0x02, 0xa2, 0x95, 0x25,
	0xfa, 0xae, 0x23, 0x0a, 0xec, 0x58, 0x20, 0xb1, 0x00, 0x24, 0xca, 0x5b, 0x42, 0x74, 0x63, 0x5c,
	0x67, 0x48, 0xac, 0xda, 0x1e, 0xe3, 0xb1, 0x2b, 0xba, 0xe0, 0x07, 0xf2, 0x97, 0x58, 0x71, 0x67,
	0x26, 0x0f, 0x23, 0x6a, 0x3b, 0xac, 0x22, 0xcf, 0x9c, 0x7b, 0xce, 0x7d, 0x9d, 0x51, 0xe0, 0xd1,
	0x38, 0xcc, 0x27, 0xc5, 0x85, 0x1b, 0xf0, 0x78, 0x18, 0x87, 0x41, 0xc6, 0x87, 0x22, 0xf2, 0x83,
	0xcb, 0x13, 0x91, 0x5d, 0x0d, 0xd3, 0x8c, 0xe7, 0x7c, 0x38, 0xce, 0x78, 0x91, 0x8a, 0xe9, 0x8f,
	0xab, 0xce, 0x08, 0x1d, 0x73, 0x57, 0xa1, 0x5d, 0xc4, 0xb9, 0x2a, 0xc2, 0x55, 0x80, 0xc1, 0x49,
	0x23, 0x1f, 0xde, 0xc4, 0x3c, 0xd1, 0x44, 0xce, 0xcf, 0x15, 0x30, 0x9e, 0xcb, 0x40, 0x02, 0xb0,
	0x12, 0x8e, 0x68, 0x6b, 0xa7, 0xb5, 0xbf, 0x46, 0x6c, 0x58, 0x4d, 0xfc, 0x98, 0xd1, 0x15, 0xf5,
	0xb5, 0x01, 0x66, 0x28, 0x3c, 0x45, 0x4f, 0xdb, 0xea, 0xa4, 0x0f, 0xdd, 0x20, 0x63, 0x7e, 0xce,
	0x46, 0x74, 0x15, 0x0f, 0xda, 0xf3, 0x03, 0x9e, 0x51, 0x43, 0x1d, 0xfc, 0x0f, 0x16, 0xc6, 0xf8,
	0x59, 0x30, 0x09, 0xaf, 0x10, 0xd5, 0xc1, 0x43, 0x53, 0xa2, 0x62, 0x16, 0x5f, 0xb0, 0x4c, 0xd0,
	0xee, 0x4e, 0x1b, 0x79, 0xf6, 0xc1, 0xc8, 0x79, 0x1a, 0x06, 0xd4, 0xc4, 0x7b, 0xeb, 0xf4, 0xb6,
	0x7b, 0x43, 0x59, 0x1f, 0x25, 0x80, 0x1c, 0x43, 0x37, 0x2d, 0xb2, 0x94, 0x0b, 0x46, 0xd7, 0x14,
	0xf6, 0xce, 0x4d, 0xd8, 0xb7, 0x1a, 0x22, 0xd5, 0x23, 0xcc, 0x4e, 0xe4, 0x1e, 0x26, 0x35, 0xa2,
	0xa0, 0x92, 0x3e, 0x82, 0x8e, 0x3e, 0xa4, 0x56, 0x35, 0xc3, 0x19, 0x13, 0xc2, 0x1f, 0x33, 0xb2,
	0x05, 0x76, 0x91, 0xc8, 0x60, 0x2f, 0xe0, 0x45, 0x92, 0x53, 0x5b, 0x55, 0x75, 0x17, 0xb6, 0xca,
	0xa7, 0xde, 0x28, 0x14, 0x69, 0xe4, 0x5f, 0xd3, 0x9e, 0xbc, 0x75, 0xb6, 0xc1, 0x7e, 0x16, 0xa1,
	0xfc, 0x7b, 0xf6, 0xad, 0x40, 0x19, 0xd5, 0x94, 0x89, 0x9f, 0x24, 0x2c, 0xd2, 0x6d, 0x75, 0xde,
	0x41, 0x6f, 0x0a, 0x10, 0x29, 0x4f, 0x30, 0x4f, 0xec, 0x39, 0xbf, 0x54, 0x97, 0x26, 0xe9, 0x81,
	0xc1, 0xb2, 0x0c, 0x1b, 0xa8, 0x9b, 0x8e, 0x9f, 0x09, 0xf7, 0xb8, 0xee, 0xb8, 0x49, 0x6e, 0xc1,
	0xba, 0x1f, 0x49, 0xe5, 0x6b, 0x2f, 0x90, 0x14, 0xba, 0xf1, 0xa6, 0x93, 0xc3, 0xfa, 0x8b, 0x50,
	0x60, 0xdf, 0xaf, 0xab, 0x54, 0xc9, 0xfa, 0xbc, 0x6e, 0xc9, 0xdc, 0x92, 0xdf, 0x3c, 0x1a, 0xc9,
	0xef, 0xb6, 0xfa, 0xde, 0x84, 0xb5, 0x30, 0x09, 0xa2, 0x42, 0xe0, 0xa4, 0xa6, 0xe3, 0x44, 0x71,
	0x5d, 0xb6, 0x31, 0x9b, 0xae, 0x2e, 0x5b, 0xa8, 0x41, 0xb6, 0x9d, 0x1f, 0xd0, 0x9f, 0xab, 0x36,
	0x97, 0xb2, 0x48, 0x40, 0x6f, 0xcf, 0x09, 0x98, 0xb1, 0x6e, 0xb3, 0x40, 0xbd, 0x76, 0xd3, 0x28,
	0x70, 0xfd, 0x26, 0xbe, 0xf0, 0x62, 0x9e, 0x31, 0x95, 0x8f, 0xe9, 0xdc, 0x03, 0xeb, 0x65, 0xf2,
	0x95, 0x57, 0xf6, 0xf9, 0x33, 0xd8, 0xfa, 0xbe, 0x39, 0x37, 0x17, 0x8c, 0xc5, 0x62, 0x5b, 0xa7,
	0xdb, 0x6e, 0x95, 0xb1, 0x5c, 0xe5, 0x12, 0x67, 0x0f, 0xac, 0x57, 0x58, 0xf9, 0x4c, 0x9a, 0xc2,
	0x06, 0xfb, 0x8e, 0xbd, 0x1b, 0xb1, 0xc5, 0xae, 0xb7, 0x54, 0x8b, 0xce, 0xc1, 0xd6, 0xc0, 0xe6,
	0x1c, 0x86, 0xd0, 0xd1, 0xe6, 0xc6, 0x24, 0xda, 0xcb, 0x24, 0x71, 0x08, 0xd6, 0x99, 0x9f, 0x5d,
	0x56, 0x4e, 0x1c, 0xb5, 0x72, 0xa1, 0xa7, 0xed, 0x1c, 0x80, 0xad, 0xb1, 0x8d, 0x79, 0xc8, 0xb6,
	0xbe, 0x49, 0x59, 0x52, 0xd9, 0xd6, 0xd7, 0x60, 0xeb, 0xfb, 0x7f, 0xde, 0x5e, 0x74, 0xd3, 0x6c,
	0x7b, 0x39, 0x32, 0x4c, 0x77, 0xf7, 0x31, 0x6c, 0x7e, 0x60, 0xf9, 0xd4, 0xb3, 0x95, 0xc5, 0xf4,
	0x17, 0xce, 0xd7, 0x69, 0x3e, 0x05, 0x52, 0x0e, 0x6b, 0x4e, 0xa6, 0xc4, 0xa0, 0x16, 0xd0, 0x79,
	0x00, 0x7d, 0x64, 0x50, 0x0f, 0x4b, 0xa5, 0x6c, 0x6f, 0xf6, 0x34, 0x69, 0xd1, 0x27, 0xb0, 0xb1,
	0x08, 0x59, 0xaa, 0x7e, 0x1d, 0xad, 0x04, 0x4f, 0x7f, 0x19, 0xd0, 0x51, 0xa3, 0x13, 0xe4, 0x1c,
	0x0c, 0xf5, 0x06, 0x90, 0xdd, 0xea, 0x29, 0x97, 0x5f, 0x91, 0xc1, 0x5e, 0x23, 0x4e, 0xa7, 0xe3,
	0xfc, 0x47, 0xbe, 0x40, 0x77, 0x6a, 0x4b, 0xb2, 0x5f, 0x1d, 0xf5, 0xe7, 0x7b, 0x31, 0x38, 0x58,
	0x02, 0x39, 0x57, 0xf8, 0x04, 0xab, 0xd2, 0x59, 0xe4, 0x7e, 0x75, 0x50, 0xc9, 0x99, 0x83, 0xdd,
	0x26, 0x58, 0x99, 0x58, 0xda, 0xa5, 0x8e, 0xb8, 0xe4, 0xbb, 0x3a, 0xe2, 0xb2, 0xeb, 0x34, 0xb1,
	0xdc, 0xff, 0x3a, 0xe2, 0x92, 0x97, 0xea, 0x88, 0xcb, 0x36, 0xd2, 0xc4, 0xd2, 0x0d, 0x75, 0xc4,
	0x25, 0x37, 0xd5, 0x11, 0x97, 0x4d, 0x85, 0xc4, 0x21, 0xc0, 0x62, 0xbf, 0xc9, 0x51, 0x75, 0xdc,
	0x5f, 0xe6, 0x19, 0x1c, 0x2f, 0x07, 0x9e, 0x4b, 0x05, 0x60, 0xce, 0xb6, 0x9a, 0x1c, 0xd4, 0xc6,
	0x96, 0xcd, 0x32, 0x38, 0x5c, 0x06, 0x3a, 0x13, 0xb9, 0xe8, 0xa8, 0x7f, 0x1a, 0x0f, 0x7f, 0x07,
	0x00, 0x00, 0xff, 0xff, 0xf2, 0xa2, 0x68, 0x0c, 0xea, 0x08, 0x00, 0x00,
}
