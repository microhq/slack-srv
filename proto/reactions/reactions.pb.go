// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/micro/slack-srv/proto/reactions/reactions.proto

/*
Package go_micro_srv_slack_reactions is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/slack-srv/proto/reactions/reactions.proto

It has these top-level messages:
	Reaction
	Message
	File
	Item
	AddRequest
	AddResponse
	GetRequest
	GetResponse
	ListRequest
	ListResponse
	RemoveRequest
	RemoveResponse
*/
package go_micro_srv_slack_reactions

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_micro_srv_slack "github.com/micro/slack-srv/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Reaction struct {
	Name  string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Count int64    `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Users []string `protobuf:"bytes,3,rep,name=users" json:"users,omitempty"`
}

func (m *Reaction) Reset()                    { *m = Reaction{} }
func (m *Reaction) String() string            { return proto.CompactTextString(m) }
func (*Reaction) ProtoMessage()               {}
func (*Reaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Reaction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Reaction) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Reaction) GetUsers() []string {
	if m != nil {
		return m.Users
	}
	return nil
}

type Message struct {
	Message   *go_micro_srv_slack.Message `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Reactions []*Reaction                 `protobuf:"bytes,2,rep,name=reactions" json:"reactions,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Message) GetMessage() *go_micro_srv_slack.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Message) GetReactions() []*Reaction {
	if m != nil {
		return m.Reactions
	}
	return nil
}

type File struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Created   int64  `protobuf:"varint,2,opt,name=created" json:"created,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *File) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *File) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *File) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Item struct {
	Type        string      `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Channel     string      `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
	File        *File       `protobuf:"bytes,3,opt,name=file" json:"file,omitempty"`
	FileComment *File       `protobuf:"bytes,4,opt,name=file_comment,json=fileComment" json:"file_comment,omitempty"`
	Message     *Message    `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	Reactions   []*Reaction `protobuf:"bytes,6,rep,name=reactions" json:"reactions,omitempty"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Item) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Item) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *Item) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *Item) GetFileComment() *File {
	if m != nil {
		return m.FileComment
	}
	return nil
}

func (m *Item) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Item) GetReactions() []*Reaction {
	if m != nil {
		return m.Reactions
	}
	return nil
}

type AddRequest struct {
	Name        string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	File        string  `protobuf:"bytes,2,opt,name=file" json:"file,omitempty"`
	FileComment string  `protobuf:"bytes,3,opt,name=file_comment,json=fileComment" json:"file_comment,omitempty"`
	Channel     string  `protobuf:"bytes,4,opt,name=channel" json:"channel,omitempty"`
	Timestamp   float64 `protobuf:"fixed64,5,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *AddRequest) Reset()                    { *m = AddRequest{} }
func (m *AddRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()               {}
func (*AddRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AddRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddRequest) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *AddRequest) GetFileComment() string {
	if m != nil {
		return m.FileComment
	}
	return ""
}

func (m *AddRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *AddRequest) GetTimestamp() float64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type AddResponse struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *AddResponse) Reset()                    { *m = AddResponse{} }
func (m *AddResponse) String() string            { return proto.CompactTextString(m) }
func (*AddResponse) ProtoMessage()               {}
func (*AddResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *AddResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GetRequest struct {
	File        string  `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	FileComment string  `protobuf:"bytes,2,opt,name=file_comment,json=fileComment" json:"file_comment,omitempty"`
	Channel     string  `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
	Timestamp   float64 `protobuf:"fixed64,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Full        bool    `protobuf:"varint,5,opt,name=full" json:"full,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetRequest) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *GetRequest) GetFileComment() string {
	if m != nil {
		return m.FileComment
	}
	return ""
}

func (m *GetRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *GetRequest) GetTimestamp() float64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *GetRequest) GetFull() bool {
	if m != nil {
		return m.Full
	}
	return false
}

type GetResponse struct {
	Ok      bool     `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error   string   `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Type    string   `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Channel string   `protobuf:"bytes,4,opt,name=channel" json:"channel,omitempty"`
	Message *Message `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *GetResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *GetResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetResponse) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *GetResponse) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type ListRequest struct {
	User  string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Full  bool   `protobuf:"varint,2,opt,name=full" json:"full,omitempty"`
	Count int64  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Page  int64  `protobuf:"varint,4,opt,name=page" json:"page,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ListRequest) GetFull() bool {
	if m != nil {
		return m.Full
	}
	return false
}

func (m *ListRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ListResponse struct {
	Ok    bool    `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string  `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Items []*Item `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ListResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ListResponse) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type RemoveRequest struct {
	Name        string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	File        string  `protobuf:"bytes,2,opt,name=file" json:"file,omitempty"`
	FileComment string  `protobuf:"bytes,3,opt,name=file_comment,json=fileComment" json:"file_comment,omitempty"`
	Channel     string  `protobuf:"bytes,4,opt,name=channel" json:"channel,omitempty"`
	Timestamp   float64 `protobuf:"fixed64,5,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *RemoveRequest) Reset()                    { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()               {}
func (*RemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RemoveRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RemoveRequest) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *RemoveRequest) GetFileComment() string {
	if m != nil {
		return m.FileComment
	}
	return ""
}

func (m *RemoveRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *RemoveRequest) GetTimestamp() float64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type RemoveResponse struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *RemoveResponse) Reset()                    { *m = RemoveResponse{} }
func (m *RemoveResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveResponse) ProtoMessage()               {}
func (*RemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RemoveResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *RemoveResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*Reaction)(nil), "go.micro.srv.slack.reactions.Reaction")
	proto.RegisterType((*Message)(nil), "go.micro.srv.slack.reactions.Message")
	proto.RegisterType((*File)(nil), "go.micro.srv.slack.reactions.File")
	proto.RegisterType((*Item)(nil), "go.micro.srv.slack.reactions.Item")
	proto.RegisterType((*AddRequest)(nil), "go.micro.srv.slack.reactions.AddRequest")
	proto.RegisterType((*AddResponse)(nil), "go.micro.srv.slack.reactions.AddResponse")
	proto.RegisterType((*GetRequest)(nil), "go.micro.srv.slack.reactions.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "go.micro.srv.slack.reactions.GetResponse")
	proto.RegisterType((*ListRequest)(nil), "go.micro.srv.slack.reactions.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "go.micro.srv.slack.reactions.ListResponse")
	proto.RegisterType((*RemoveRequest)(nil), "go.micro.srv.slack.reactions.RemoveRequest")
	proto.RegisterType((*RemoveResponse)(nil), "go.micro.srv.slack.reactions.RemoveResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Reactions service

type ReactionsClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
}

type reactionsClient struct {
	cc *grpc.ClientConn
}

func NewReactionsClient(cc *grpc.ClientConn) ReactionsClient {
	return &reactionsClient{cc}
}

func (c *reactionsClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.reactions.Reactions/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reactionsClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.reactions.Reactions/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reactionsClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.reactions.Reactions/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reactionsClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.reactions.Reactions/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Reactions service

type ReactionsServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Remove(context.Context, *RemoveRequest) (*RemoveResponse, error)
}

func RegisterReactionsServer(s *grpc.Server, srv ReactionsServer) {
	s.RegisterService(&_Reactions_serviceDesc, srv)
}

func _Reactions_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReactionsServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.reactions.Reactions/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReactionsServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reactions_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReactionsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.reactions.Reactions/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReactionsServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reactions_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReactionsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.reactions.Reactions/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReactionsServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reactions_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReactionsServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.reactions.Reactions/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReactionsServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reactions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.srv.slack.reactions.Reactions",
	HandlerType: (*ReactionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Reactions_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Reactions_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Reactions_List_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Reactions_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/micro/slack-srv/proto/reactions/reactions.proto",
}

func init() {
	proto.RegisterFile("github.com/micro/slack-srv/proto/reactions/reactions.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 629 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xae, 0x2f, 0xbd, 0xf8, 0xb8, 0x7f, 0x17, 0xa3, 0x7f, 0x61, 0x85, 0x2e, 0x82, 0x25, 0x50,
	0xb8, 0xd4, 0x91, 0x52, 0x51, 0x21, 0x36, 0xa8, 0xe2, 0x52, 0x81, 0x80, 0xc5, 0xac, 0x91, 0x2a,
	0xd7, 0x1e, 0x52, 0x2b, 0xb6, 0x27, 0x78, 0x26, 0x91, 0x78, 0x01, 0xb6, 0x95, 0x78, 0x04, 0x1e,
	0x83, 0xa7, 0x43, 0x73, 0xc6, 0xb7, 0x44, 0x91, 0x9d, 0xc0, 0x86, 0x55, 0xce, 0x78, 0xce, 0x39,
	0xf3, 0x7d, 0xdf, 0xf9, 0x66, 0x02, 0x2f, 0xa6, 0x89, 0xbc, 0x5d, 0xdc, 0x04, 0x11, 0xcf, 0xc6,
	0x59, 0x12, 0x15, 0x7c, 0x2c, 0xd2, 0x30, 0x9a, 0x9d, 0x89, 0x62, 0x39, 0x9e, 0x17, 0x5c, 0xf2,
	0x71, 0xc1, 0xc2, 0x48, 0x26, 0x3c, 0x17, 0x4d, 0x14, 0xe0, 0x0e, 0x39, 0x9d, 0xf2, 0x00, 0x6b,
	0x02, 0x51, 0x2c, 0x03, 0xac, 0x0b, 0xea, 0x9c, 0xc1, 0x59, 0x6f, 0xe7, 0x88, 0x67, 0x19, 0xcf,
	0x75, 0x33, 0xff, 0x3d, 0x1c, 0xd1, 0xb2, 0x96, 0x10, 0xb0, 0xf3, 0x30, 0x63, 0x9e, 0x31, 0x34,
	0x46, 0x0e, 0xc5, 0x98, 0xfc, 0x0f, 0xfb, 0x11, 0x5f, 0xe4, 0xd2, 0x33, 0x87, 0xc6, 0xc8, 0xa2,
	0x7a, 0xa1, 0xbe, 0x2e, 0x04, 0x2b, 0x84, 0x67, 0x0d, 0xad, 0x91, 0x43, 0xf5, 0xc2, 0xff, 0x6e,
	0xc0, 0xe1, 0x47, 0x26, 0x44, 0x38, 0x65, 0xe4, 0x19, 0x1c, 0x66, 0x3a, 0xc4, 0x76, 0xee, 0xe4,
	0x5e, 0xb0, 0x01, 0x76, 0x99, 0x4d, 0xab, 0x5c, 0xf2, 0x1a, 0x9c, 0x9a, 0x8a, 0x67, 0x0e, 0xad,
	0x91, 0x3b, 0x79, 0x18, 0x74, 0xf1, 0x0d, 0x2a, 0xf4, 0xb4, 0x29, 0xf4, 0x3f, 0x81, 0xfd, 0x36,
	0x49, 0x19, 0x39, 0x01, 0x33, 0x89, 0x4b, 0x3a, 0x66, 0x12, 0x13, 0x0f, 0x0e, 0xa3, 0x82, 0x85,
	0x92, 0xc5, 0x25, 0x9d, 0x6a, 0x49, 0x4e, 0xc1, 0x91, 0x49, 0xc6, 0x84, 0x0c, 0xb3, 0xb9, 0x67,
	0xe1, 0x5e, 0xf3, 0xc1, 0xff, 0x65, 0x82, 0xfd, 0x4e, 0xb2, 0x4c, 0x29, 0x24, 0xbf, 0xcd, 0x6b,
	0x85, 0x54, 0x8c, 0x4d, 0x6f, 0xc3, 0x3c, 0x67, 0x29, 0x36, 0x75, 0x68, 0xb5, 0x24, 0x17, 0x60,
	0x7f, 0x49, 0x52, 0x86, 0xfd, 0xdc, 0x89, 0xdf, 0xcd, 0x43, 0x01, 0xa6, 0x98, 0x4f, 0xde, 0xc0,
	0xb1, 0xfa, 0xbd, 0x56, 0x83, 0x62, 0xb9, 0xf4, 0xec, 0xad, 0xeb, 0x5d, 0x55, 0xf7, 0x4a, 0x97,
	0x91, 0x97, 0xcd, 0x08, 0xf6, 0xb1, 0xc3, 0x83, 0xee, 0x0e, 0xdd, 0xc3, 0x38, 0xf8, 0xd3, 0x61,
	0xdc, 0x19, 0x00, 0x97, 0x71, 0x4c, 0xd9, 0xd7, 0x05, 0x13, 0x72, 0xa3, 0xc9, 0x48, 0x29, 0x94,
	0xd6, 0x4f, 0x8b, 0x70, 0x7f, 0x4d, 0x04, 0x0b, 0xf7, 0x56, 0x08, 0xb6, 0x94, 0xb7, 0x57, 0x95,
	0x5f, 0x19, 0xa7, 0x22, 0x6f, 0xb4, 0xc7, 0x79, 0x0e, 0x2e, 0x02, 0x12, 0x73, 0x9e, 0x0b, 0x74,
	0x09, 0x9f, 0x21, 0x9e, 0x23, 0x6a, 0xf2, 0x99, 0x32, 0x37, 0x2b, 0x0a, 0x5e, 0x94, 0x70, 0xf4,
	0x02, 0x69, 0x5c, 0x31, 0xd9, 0xa2, 0x81, 0x90, 0x8d, 0x0e, 0xc8, 0x66, 0x27, 0x64, 0xab, 0x03,
	0xb2, 0xbd, 0x06, 0x19, 0x8f, 0x5b, 0xa4, 0x29, 0x72, 0x39, 0xa2, 0x18, 0xfb, 0x3f, 0x0d, 0x70,
	0x11, 0xd1, 0x2e, 0x3c, 0x6a, 0x0b, 0x5b, 0x9b, 0x2d, 0xbc, 0x26, 0xe4, 0xdf, 0x7a, 0xc8, 0xbf,
	0x06, 0xf7, 0x43, 0x22, 0xda, 0xb2, 0xa9, 0xb7, 0xa2, 0x92, 0x4d, 0xc5, 0x35, 0x37, 0xb3, 0xe1,
	0xd6, 0x3c, 0x3b, 0x56, 0xfb, 0xd9, 0x21, 0x60, 0xcf, 0x15, 0x14, 0x1b, 0x3f, 0x62, 0xec, 0xe7,
	0x70, 0xac, 0x0f, 0xd8, 0x49, 0x85, 0xe7, 0xb0, 0x9f, 0x48, 0x96, 0xe9, 0x07, 0xac, 0xf7, 0x6e,
	0xa9, 0xbb, 0x4f, 0x75, 0x81, 0xff, 0xc3, 0x80, 0xff, 0x28, 0xcb, 0xf8, 0x92, 0xfd, 0x43, 0x8e,
	0xbe, 0x80, 0x93, 0x0a, 0xd3, 0x2e, 0x32, 0x4c, 0xee, 0x2c, 0x70, 0xaa, 0x3b, 0x2b, 0xc8, 0x67,
	0xb0, 0x2e, 0xe3, 0x98, 0x8c, 0xba, 0xc5, 0x68, 0xee, 0xf2, 0xe0, 0xd1, 0x16, 0x99, 0x1a, 0x8f,
	0xbf, 0xa7, 0xba, 0x5f, 0x31, 0xd9, 0xd7, 0xbd, 0xb9, 0x62, 0x7d, 0xdd, 0x5b, 0xd6, 0xf7, 0xf7,
	0xc8, 0x35, 0xd8, 0xca, 0x06, 0xa4, 0xa7, 0xa8, 0xe5, 0xc5, 0xc1, 0xe3, 0x6d, 0x52, 0xeb, 0x03,
	0x18, 0x1c, 0x68, 0x89, 0xc9, 0x93, 0xbe, 0x37, 0xb0, 0x65, 0x8e, 0xc1, 0xd3, 0xed, 0x92, 0xab,
	0x63, 0x6e, 0x0e, 0xf0, 0x6f, 0xf9, 0xfc, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0xb4, 0x00,
	0x6d, 0x21, 0x08, 0x00, 0x00,
}
