// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/micro/slack-srv/proto/reactions/reactions.proto

/*
Package go_micro_srv_slack_reactions is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/slack-srv/proto/reactions/reactions.proto

It has these top-level messages:
	Reaction
	Message
	File
	Item
	AddRequest
	AddResponse
	GetRequest
	GetResponse
	ListRequest
	ListResponse
	RemoveRequest
	RemoveResponse
*/
package go_micro_srv_slack_reactions

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/micro/slack-srv/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Reactions service

type ReactionsService interface {
	Add(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...client.CallOption) (*RemoveResponse, error)
}

type reactionsService struct {
	c           client.Client
	serviceName string
}

func ReactionsServiceClient(serviceName string, c client.Client) ReactionsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.slack.reactions"
	}
	return &reactionsService{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *reactionsService) Add(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Reactions.Add", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reactionsService) Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Reactions.Get", in)
	out := new(GetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reactionsService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Reactions.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reactionsService) Remove(ctx context.Context, in *RemoveRequest, opts ...client.CallOption) (*RemoveResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Reactions.Remove", in)
	out := new(RemoveResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Reactions service

type ReactionsHandler interface {
	Add(context.Context, *AddRequest, *AddResponse) error
	Get(context.Context, *GetRequest, *GetResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
	Remove(context.Context, *RemoveRequest, *RemoveResponse) error
}

func RegisterReactionsHandler(s server.Server, hdlr ReactionsHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Reactions{hdlr}, opts...))
}

type Reactions struct {
	ReactionsHandler
}

func (h *Reactions) Add(ctx context.Context, in *AddRequest, out *AddResponse) error {
	return h.ReactionsHandler.Add(ctx, in, out)
}

func (h *Reactions) Get(ctx context.Context, in *GetRequest, out *GetResponse) error {
	return h.ReactionsHandler.Get(ctx, in, out)
}

func (h *Reactions) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.ReactionsHandler.List(ctx, in, out)
}

func (h *Reactions) Remove(ctx context.Context, in *RemoveRequest, out *RemoveResponse) error {
	return h.ReactionsHandler.Remove(ctx, in, out)
}
