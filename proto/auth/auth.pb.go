// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/micro/slack-srv/proto/auth/auth.proto

/*
Package go_micro_srv_slack_auth is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/slack-srv/proto/auth/auth.proto

It has these top-level messages:
	TestRequest
	TestResponse
*/
package go_micro_srv_slack_auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TestRequest struct {
}

func (m *TestRequest) Reset()                    { *m = TestRequest{} }
func (m *TestRequest) String() string            { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()               {}
func (*TestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TestResponse struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Url    string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Team   string `protobuf:"bytes,4,opt,name=team" json:"team,omitempty"`
	User   string `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
	TeamId string `protobuf:"bytes,6,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	UserId string `protobuf:"bytes,7,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *TestResponse) Reset()                    { *m = TestResponse{} }
func (m *TestResponse) String() string            { return proto.CompactTextString(m) }
func (*TestResponse) ProtoMessage()               {}
func (*TestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TestResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *TestResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *TestResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *TestResponse) GetTeam() string {
	if m != nil {
		return m.Team
	}
	return ""
}

func (m *TestResponse) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *TestResponse) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *TestResponse) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func init() {
	proto.RegisterType((*TestRequest)(nil), "go.micro.srv.slack.auth.TestRequest")
	proto.RegisterType((*TestResponse)(nil), "go.micro.srv.slack.auth.TestResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Auth service

type AuthClient interface {
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.auth.Auth/Test", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthServer interface {
	Test(context.Context, *TestRequest) (*TestResponse, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.auth.Auth/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.srv.slack.auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _Auth_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/micro/slack-srv/proto/auth/auth.proto",
}

func init() { proto.RegisterFile("github.com/micro/slack-srv/proto/auth/auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x4d, 0x9a, 0xa6, 0x3a, 0xfe, 0x41, 0x06, 0xa1, 0x8b, 0xa7, 0x12, 0x14, 0x7a, 0x71,
	0x23, 0xfa, 0x09, 0x3c, 0xf6, 0x1a, 0xf4, 0x28, 0x92, 0x26, 0x4b, 0x13, 0xd2, 0x38, 0x75, 0x76,
	0xb7, 0x9f, 0xc7, 0x8f, 0x2a, 0x33, 0xb9, 0x78, 0x11, 0x2f, 0xcb, 0x7b, 0xef, 0xf7, 0x0e, 0xfb,
	0x06, 0x1e, 0x77, 0x7d, 0xe8, 0xe2, 0xd6, 0x36, 0x34, 0x96, 0x63, 0xdf, 0x30, 0x95, 0x7e, 0x5f,
	0x37, 0xc3, 0x83, 0xe7, 0x63, 0x79, 0x60, 0x0a, 0x54, 0xd6, 0x31, 0x74, 0xfa, 0x58, 0xf5, 0xb8,
	0xdc, 0x91, 0xd5, 0xa6, 0xf5, 0x7c, 0xb4, 0xda, 0xb6, 0x82, 0x8b, 0x4b, 0x38, 0x7f, 0x75, 0x3e,
	0x54, 0xee, 0x2b, 0x3a, 0x1f, 0x8a, 0xef, 0x04, 0x2e, 0x26, 0xef, 0x0f, 0xf4, 0xe9, 0x1d, 0x5e,
	0x41, 0x4a, 0x83, 0x49, 0x56, 0xc9, 0xfa, 0xb4, 0x4a, 0x69, 0xc0, 0x1b, 0x98, 0x3b, 0x66, 0x62,
	0x93, 0xae, 0x92, 0xf5, 0x59, 0x35, 0x19, 0xbc, 0x86, 0x59, 0xe4, 0xbd, 0x99, 0x69, 0x26, 0x12,
	0x11, 0xb2, 0xe0, 0xea, 0xd1, 0x64, 0x1a, 0xa9, 0x96, 0x2c, 0x7a, 0xc7, 0x66, 0x3e, 0x65, 0xa2,
	0x71, 0x09, 0x0b, 0x61, 0x1f, 0x7d, 0x6b, 0x72, 0x8d, 0x73, 0xb1, 0x9b, 0x56, 0x80, 0x14, 0x04,
	0x2c, 0x26, 0x20, 0x76, 0xd3, 0x3e, 0xbd, 0x43, 0xf6, 0x12, 0x43, 0x87, 0x6f, 0x90, 0xc9, 0x4f,
	0xf1, 0xce, 0xfe, 0xb1, 0xcd, 0xfe, 0x1a, 0x76, 0x7b, 0xff, 0x4f, 0x6b, 0x9a, 0x5b, 0x9c, 0x6c,
	0x73, 0x3d, 0xd8, 0xf3, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x8c, 0x42, 0x58, 0x64, 0x01,
	0x00, 0x00,
}
