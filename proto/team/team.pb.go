// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/micro/slack-srv/proto/team/team.proto

/*
Package go_micro_srv_slack_team is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/slack-srv/proto/team/team.proto

It has these top-level messages:
	Icon
	TeamInfo
	InfoRequest
	InfoResponse
*/
package go_micro_srv_slack_team

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Icon struct {
	Image_34     string `protobuf:"bytes,1,opt,name=image_34,json=image34" json:"image_34,omitempty"`
	Image_44     string `protobuf:"bytes,2,opt,name=image_44,json=image44" json:"image_44,omitempty"`
	Image_68     string `protobuf:"bytes,3,opt,name=image_68,json=image68" json:"image_68,omitempty"`
	Image_88     string `protobuf:"bytes,4,opt,name=image_88,json=image88" json:"image_88,omitempty"`
	Image_102    string `protobuf:"bytes,5,opt,name=image_102,json=image102" json:"image_102,omitempty"`
	Image_132    string `protobuf:"bytes,6,opt,name=image_132,json=image132" json:"image_132,omitempty"`
	ImageDefault bool   `protobuf:"varint,7,opt,name=image_default,json=imageDefault" json:"image_default,omitempty"`
}

func (m *Icon) Reset()                    { *m = Icon{} }
func (m *Icon) String() string            { return proto.CompactTextString(m) }
func (*Icon) ProtoMessage()               {}
func (*Icon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Icon) GetImage_34() string {
	if m != nil {
		return m.Image_34
	}
	return ""
}

func (m *Icon) GetImage_44() string {
	if m != nil {
		return m.Image_44
	}
	return ""
}

func (m *Icon) GetImage_68() string {
	if m != nil {
		return m.Image_68
	}
	return ""
}

func (m *Icon) GetImage_88() string {
	if m != nil {
		return m.Image_88
	}
	return ""
}

func (m *Icon) GetImage_102() string {
	if m != nil {
		return m.Image_102
	}
	return ""
}

func (m *Icon) GetImage_132() string {
	if m != nil {
		return m.Image_132
	}
	return ""
}

func (m *Icon) GetImageDefault() bool {
	if m != nil {
		return m.ImageDefault
	}
	return false
}

type TeamInfo struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Domaine     string `protobuf:"bytes,3,opt,name=domaine" json:"domaine,omitempty"`
	EmailDomain string `protobuf:"bytes,4,opt,name=email_domain,json=emailDomain" json:"email_domain,omitempty"`
	Icon        *Icon  `protobuf:"bytes,5,opt,name=icon" json:"icon,omitempty"`
}

func (m *TeamInfo) Reset()                    { *m = TeamInfo{} }
func (m *TeamInfo) String() string            { return proto.CompactTextString(m) }
func (*TeamInfo) ProtoMessage()               {}
func (*TeamInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TeamInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TeamInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TeamInfo) GetDomaine() string {
	if m != nil {
		return m.Domaine
	}
	return ""
}

func (m *TeamInfo) GetEmailDomain() string {
	if m != nil {
		return m.EmailDomain
	}
	return ""
}

func (m *TeamInfo) GetIcon() *Icon {
	if m != nil {
		return m.Icon
	}
	return nil
}

type InfoRequest struct {
}

func (m *InfoRequest) Reset()                    { *m = InfoRequest{} }
func (m *InfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()               {}
func (*InfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type InfoResponse struct {
	Ok    bool      `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string    `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Team  *TeamInfo `protobuf:"bytes,3,opt,name=team" json:"team,omitempty"`
}

func (m *InfoResponse) Reset()                    { *m = InfoResponse{} }
func (m *InfoResponse) String() string            { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()               {}
func (*InfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *InfoResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *InfoResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *InfoResponse) GetTeam() *TeamInfo {
	if m != nil {
		return m.Team
	}
	return nil
}

func init() {
	proto.RegisterType((*Icon)(nil), "go.micro.srv.slack.team.Icon")
	proto.RegisterType((*TeamInfo)(nil), "go.micro.srv.slack.team.TeamInfo")
	proto.RegisterType((*InfoRequest)(nil), "go.micro.srv.slack.team.InfoRequest")
	proto.RegisterType((*InfoResponse)(nil), "go.micro.srv.slack.team.InfoResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Team service

type TeamClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
}

type teamClient struct {
	cc *grpc.ClientConn
}

func NewTeamClient(cc *grpc.ClientConn) TeamClient {
	return &teamClient{cc}
}

func (c *teamClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.team.Team/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Team service

type TeamServer interface {
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
}

func RegisterTeamServer(s *grpc.Server, srv TeamServer) {
	s.RegisterService(&_Team_serviceDesc, srv)
}

func _Team_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.team.Team/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Team_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.srv.slack.team.Team",
	HandlerType: (*TeamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Team_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/micro/slack-srv/proto/team/team.proto",
}

func init() { proto.RegisterFile("github.com/micro/slack-srv/proto/team/team.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0xae, 0x9a, 0x40,
	0x18, 0x85, 0x0b, 0x45, 0xc5, 0x1f, 0xed, 0x62, 0xd2, 0xa4, 0xd3, 0x36, 0x4d, 0x94, 0xb6, 0x89,
	0x9b, 0x0e, 0x0a, 0xd4, 0xf0, 0x00, 0x6e, 0xdc, 0x92, 0x76, 0xd9, 0x98, 0x11, 0x46, 0x3b, 0xc1,
	0x61, 0xbc, 0x80, 0x3e, 0xce, 0x7d, 0xa7, 0xfb, 0x46, 0x37, 0xfc, 0x83, 0x91, 0x8d, 0xb9, 0x1b,
	0xe3, 0x39, 0xdf, 0x09, 0x9c, 0xf3, 0x07, 0x58, 0x1e, 0x65, 0xf3, 0xff, 0xb2, 0x67, 0x99, 0x56,
	0x81, 0x92, 0x59, 0xa5, 0x83, 0xfa, 0xc4, 0xb3, 0xe2, 0x57, 0x5d, 0x5d, 0x83, 0x73, 0xa5, 0x1b,
	0x1d, 0x34, 0x82, 0x2b, 0xfc, 0x61, 0xa8, 0xc9, 0xa7, 0xa3, 0x66, 0x98, 0x64, 0x75, 0x75, 0x65,
	0x98, 0x66, 0x2d, 0xf6, 0x5f, 0x2c, 0x70, 0xb6, 0x99, 0x2e, 0xc9, 0x67, 0x70, 0xa5, 0xe2, 0x47,
	0xb1, 0x8b, 0x62, 0x6a, 0xcd, 0xac, 0xc5, 0x38, 0x1d, 0xa1, 0x8e, 0xe2, 0x3b, 0x8a, 0x63, 0x6a,
	0xf7, 0x50, 0xdc, 0x43, 0xeb, 0x84, 0xbe, 0xef, 0xa1, 0x75, 0x72, 0x47, 0x49, 0x42, 0x9d, 0x1e,
	0x4a, 0x12, 0xf2, 0x15, 0xc6, 0x06, 0xad, 0x96, 0x21, 0x1d, 0x20, 0x33, 0xd9, 0xd5, 0x32, 0xec,
	0xc1, 0x28, 0xa4, 0xc3, 0x3e, 0x8c, 0x42, 0xf2, 0x1d, 0xa6, 0x06, 0xe6, 0xe2, 0xc0, 0x2f, 0xa7,
	0x86, 0x8e, 0x66, 0xd6, 0xc2, 0x4d, 0x27, 0x68, 0x6e, 0x8c, 0xe7, 0x3f, 0x5b, 0xe0, 0xfe, 0x11,
	0x5c, 0x6d, 0xcb, 0x83, 0x26, 0x1f, 0xc0, 0x96, 0x79, 0xb7, 0xc8, 0x96, 0x39, 0x21, 0xe0, 0x94,
	0x5c, 0x89, 0x6e, 0x08, 0xfe, 0x27, 0x14, 0x46, 0xb9, 0x56, 0x5c, 0x96, 0xe2, 0x36, 0xa2, 0x93,
	0x64, 0x0e, 0x13, 0xa1, 0xb8, 0x3c, 0xed, 0x8c, 0xd1, 0x0d, 0xf1, 0xd0, 0xdb, 0xa0, 0x45, 0x56,
	0xe0, 0xc8, 0x4c, 0x97, 0xb8, 0xc3, 0x0b, 0xbf, 0xb1, 0x07, 0x97, 0x66, 0xed, 0x95, 0x53, 0x8c,
	0xfa, 0x53, 0xf0, 0xda, 0x6e, 0xa9, 0x78, 0xba, 0x88, 0xba, 0xf1, 0x0b, 0x98, 0x18, 0x59, 0x9f,
	0x75, 0x59, 0x8b, 0xb6, 0xb2, 0x2e, 0xb0, 0xb2, 0x9b, 0xda, 0xba, 0x20, 0x1f, 0x61, 0x20, 0xaa,
	0x4a, 0x57, 0x5d, 0x67, 0x23, 0xc8, 0x6f, 0x70, 0xda, 0xe7, 0x62, 0x63, 0x2f, 0x9c, 0x3f, 0x7c,
	0xef, 0xed, 0x12, 0x29, 0xc6, 0xc3, 0x7f, 0xe0, 0xb4, 0x0e, 0xf9, 0x0b, 0x0e, 0xde, 0xe7, 0xc7,
	0xe3, 0xc2, 0xf7, 0x8a, 0x5f, 0x7e, 0xbe, 0x91, 0x32, 0xcd, 0xfd, 0x77, 0xfb, 0x21, 0x7e, 0x6f,
	0xd1, 0x6b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb7, 0xf7, 0x98, 0x33, 0xa3, 0x02, 0x00, 0x00,
}
