// Code generated by protoc-gen-go.
// source: github.com/micro/slack-srv/proto/team/team.proto
// DO NOT EDIT!

/*
Package go_micro_srv_slack_team is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/slack-srv/proto/team/team.proto

It has these top-level messages:
	Icon
	TeamInfo
	InfoRequest
	InfoResponse
*/
package go_micro_srv_slack_team

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Icon struct {
	Image_34     string `protobuf:"bytes,1,opt,name=image_34" json:"image_34,omitempty"`
	Image_44     string `protobuf:"bytes,2,opt,name=image_44" json:"image_44,omitempty"`
	Image_68     string `protobuf:"bytes,3,opt,name=image_68" json:"image_68,omitempty"`
	Image_88     string `protobuf:"bytes,4,opt,name=image_88" json:"image_88,omitempty"`
	Image_102    string `protobuf:"bytes,5,opt,name=image_102" json:"image_102,omitempty"`
	Image_132    string `protobuf:"bytes,6,opt,name=image_132" json:"image_132,omitempty"`
	ImageDefault bool   `protobuf:"varint,7,opt,name=image_default" json:"image_default,omitempty"`
}

func (m *Icon) Reset()                    { *m = Icon{} }
func (m *Icon) String() string            { return proto.CompactTextString(m) }
func (*Icon) ProtoMessage()               {}
func (*Icon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TeamInfo struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Domaine     string `protobuf:"bytes,3,opt,name=domaine" json:"domaine,omitempty"`
	EmailDomain string `protobuf:"bytes,4,opt,name=email_domain" json:"email_domain,omitempty"`
	Icon        *Icon  `protobuf:"bytes,5,opt,name=icon" json:"icon,omitempty"`
}

func (m *TeamInfo) Reset()                    { *m = TeamInfo{} }
func (m *TeamInfo) String() string            { return proto.CompactTextString(m) }
func (*TeamInfo) ProtoMessage()               {}
func (*TeamInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TeamInfo) GetIcon() *Icon {
	if m != nil {
		return m.Icon
	}
	return nil
}

type InfoRequest struct {
}

func (m *InfoRequest) Reset()                    { *m = InfoRequest{} }
func (m *InfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()               {}
func (*InfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type InfoResponse struct {
	Ok    bool      `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string    `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Team  *TeamInfo `protobuf:"bytes,3,opt,name=team" json:"team,omitempty"`
}

func (m *InfoResponse) Reset()                    { *m = InfoResponse{} }
func (m *InfoResponse) String() string            { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()               {}
func (*InfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *InfoResponse) GetTeam() *TeamInfo {
	if m != nil {
		return m.Team
	}
	return nil
}

func init() {
	proto.RegisterType((*Icon)(nil), "go.micro.srv.slack.team.Icon")
	proto.RegisterType((*TeamInfo)(nil), "go.micro.srv.slack.team.TeamInfo")
	proto.RegisterType((*InfoRequest)(nil), "go.micro.srv.slack.team.InfoRequest")
	proto.RegisterType((*InfoResponse)(nil), "go.micro.srv.slack.team.InfoResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Team service

type TeamClient interface {
	Info(ctx context.Context, in *InfoRequest) (*InfoResponse, error)
}

type teamClient struct {
	c           client.Client
	serviceName string
}

func NewTeamClient(serviceName string, c client.Client) TeamClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.slack.team"
	}
	return &teamClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *teamClient) Info(ctx context.Context, in *InfoRequest) (*InfoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Team.Info", in)
	out := new(InfoResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Team service

type TeamHandler interface {
	Info(context.Context, *InfoRequest, *InfoResponse) error
}

func RegisterTeamHandler(s server.Server, hdlr TeamHandler) {
	s.Handle(s.NewHandler(hdlr))
}

var fileDescriptor0 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x91, 0xd1, 0x4a, 0xf3, 0x30,
	0x18, 0x86, 0xff, 0xed, 0xcf, 0xb6, 0xee, 0xdb, 0x86, 0x5a, 0x14, 0x83, 0x20, 0x68, 0x51, 0x10,
	0xc4, 0x74, 0xb6, 0x45, 0x7a, 0x0b, 0x3b, 0x15, 0x3d, 0x11, 0x64, 0x64, 0x6d, 0x56, 0xc3, 0x9a,
	0x66, 0xa6, 0xad, 0x78, 0x0f, 0xde, 0xb4, 0x49, 0x5a, 0x19, 0x13, 0x8a, 0x27, 0xa5, 0xdf, 0xd3,
	0x97, 0xe6, 0x79, 0xbf, 0xc0, 0x3c, 0xe3, 0xd5, 0x5b, 0xbd, 0x22, 0x89, 0x14, 0xbe, 0xe0, 0x89,
	0x92, 0x7e, 0x99, 0xd3, 0x64, 0x73, 0x57, 0xaa, 0x0f, 0x7f, 0xab, 0x64, 0x25, 0xfd, 0x8a, 0x51,
	0x61, 0x1f, 0xc4, 0xce, 0xee, 0x69, 0x26, 0x89, 0x4d, 0x12, 0x9d, 0x21, 0x36, 0x4d, 0xcc, 0x67,
	0xef, 0xab, 0x07, 0x68, 0x91, 0xc8, 0xc2, 0x3d, 0x04, 0x87, 0x0b, 0x9a, 0xb1, 0x65, 0x18, 0xe1,
	0xde, 0x45, 0xef, 0x66, 0xbc, 0x23, 0x51, 0x84, 0xfb, 0xfb, 0xe4, 0x21, 0xc6, 0xff, 0xf7, 0x49,
	0x1c, 0x63, 0x64, 0xc9, 0x11, 0x8c, 0x1b, 0x72, 0x3f, 0x0f, 0xf0, 0xe0, 0x17, 0x0a, 0x03, 0x3c,
	0xb4, 0xe8, 0x04, 0x66, 0x0d, 0x4a, 0xd9, 0x9a, 0xd6, 0x79, 0x85, 0x47, 0x1a, 0x3b, 0xde, 0x27,
	0x38, 0x4f, 0xda, 0x6a, 0x51, 0xac, 0xa5, 0x0b, 0xd0, 0xe7, 0x69, 0xab, 0x32, 0x05, 0x54, 0x50,
	0xc1, 0x5a, 0x8d, 0x03, 0x18, 0xa5, 0x52, 0x50, 0x5e, 0xb0, 0xd6, 0xe2, 0x18, 0xa6, 0x4c, 0xcf,
	0xf9, 0xb2, 0xc1, 0xad, 0xc9, 0x2d, 0x20, 0xae, 0x9b, 0x59, 0x89, 0x49, 0x70, 0x4e, 0x3a, 0x56,
	0x40, 0x4c, 0x7d, 0x6f, 0x06, 0x13, 0x73, 0xea, 0x23, 0x7b, 0xaf, 0x59, 0x59, 0x79, 0x2f, 0x30,
	0x6d, 0xc6, 0x72, 0x2b, 0x8b, 0x92, 0x19, 0x19, 0xb9, 0xb1, 0x32, 0x8e, 0x3b, 0x83, 0x01, 0x53,
	0x4a, 0xaa, 0xd6, 0xc6, 0x07, 0x64, 0x7e, 0x63, 0x55, 0x26, 0xc1, 0x65, 0xe7, 0x31, 0x3f, 0xc5,
	0x82, 0x57, 0x40, 0xe6, 0xdd, 0x7d, 0xd6, 0x9b, 0x37, 0x45, 0xaf, 0xba, 0xcd, 0x76, 0x46, 0x67,
	0xd7, 0x7f, 0xa4, 0x1a, 0x51, 0xef, 0xdf, 0x6a, 0x68, 0x6f, 0x3c, 0xfc, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0xea, 0x8b, 0x29, 0xbf, 0x25, 0x02, 0x00, 0x00,
}
