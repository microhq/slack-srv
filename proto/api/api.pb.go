// Code generated by protoc-gen-go.
// source: github.com/micro/slack-srv/proto/api/api.proto
// DO NOT EDIT!

/*
Package go_micro_srv_slack is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/slack-srv/proto/api/api.proto

It has these top-level messages:
	ApiTestRequest
	ApiTestResponse
*/
package go_micro_srv_slack

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ApiTestRequest struct {
	Error string            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Args  map[string]string `protobuf:"bytes,2,rep,name=args" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ApiTestRequest) Reset()                    { *m = ApiTestRequest{} }
func (m *ApiTestRequest) String() string            { return proto.CompactTextString(m) }
func (*ApiTestRequest) ProtoMessage()               {}
func (*ApiTestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ApiTestRequest) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

type ApiTestResponse struct {
	Ok    bool              `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Args  map[string]string `protobuf:"bytes,2,rep,name=args" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Error string            `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *ApiTestResponse) Reset()                    { *m = ApiTestResponse{} }
func (m *ApiTestResponse) String() string            { return proto.CompactTextString(m) }
func (*ApiTestResponse) ProtoMessage()               {}
func (*ApiTestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ApiTestResponse) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

func init() {
	proto.RegisterType((*ApiTestRequest)(nil), "go.micro.srv.slack.ApiTestRequest")
	proto.RegisterType((*ApiTestResponse)(nil), "go.micro.srv.slack.ApiTestResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Api service

type ApiClient interface {
	Test(ctx context.Context, in *ApiTestRequest) (*ApiTestResponse, error)
}

type apiClient struct {
	c client.Client
}

func NewApiClient(c client.Client) ApiClient {
	if c == nil {
		c = client.NewClient()
	}
	return &apiClient{
		c: c,
	}
}

func (c *apiClient) Test(ctx context.Context, in *ApiTestRequest) (*ApiTestResponse, error) {
	req := c.c.NewRequest("go.micro.srv.slack", "Api.Test", in)
	out := new(ApiTestResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Api service

type ApiServer interface {
	Test(context.Context, *ApiTestRequest, *ApiTestResponse) error
}

func RegisterApiServer(s server.Server, srv ApiServer) {
	s.Handle(s.NewHandler(srv))
}

var fileDescriptor0 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xd2, 0x4b, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0xcd, 0x4c, 0x2e, 0xca, 0xd7, 0x2f, 0xce, 0x49,
	0x4c, 0xce, 0xd6, 0x2d, 0x2e, 0x2a, 0xd3, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0x2c, 0xc8,
	0x04, 0x61, 0x3d, 0x30, 0x4f, 0x48, 0x28, 0x3d, 0x5f, 0x0f, 0xac, 0x4e, 0x0f, 0xa8, 0x42, 0x0f,
	0xac, 0x56, 0xa9, 0x83, 0x91, 0x8b, 0xcf, 0xb1, 0x20, 0x33, 0x24, 0xb5, 0xb8, 0x24, 0x28, 0xb5,
	0xb0, 0x14, 0x48, 0x09, 0xf1, 0x72, 0xb1, 0xa6, 0x16, 0x15, 0xe5, 0x17, 0x49, 0x30, 0x2a, 0x30,
	0x6a, 0x70, 0x0a, 0x59, 0x71, 0xb1, 0x24, 0x16, 0xa5, 0x17, 0x4b, 0x30, 0x29, 0x30, 0x6b, 0x70,
	0x1b, 0xe9, 0xe8, 0x61, 0x1a, 0xa2, 0x87, 0x6a, 0x80, 0x9e, 0x23, 0x50, 0xb9, 0x6b, 0x5e, 0x49,
	0x51, 0xa5, 0x94, 0x36, 0x17, 0x27, 0x9c, 0x23, 0xc4, 0xcd, 0xc5, 0x9c, 0x9d, 0x5a, 0x09, 0x35,
	0x15, 0x68, 0x49, 0x59, 0x62, 0x4e, 0x69, 0x2a, 0xd0, 0x58, 0x20, 0xd7, 0x8a, 0xc9, 0x82, 0x51,
	0x69, 0x1a, 0x23, 0x17, 0x3f, 0xdc, 0xa4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x2e, 0x2e,
	0xa6, 0xfc, 0x6c, 0xb0, 0x16, 0x0e, 0x21, 0x6b, 0x14, 0x87, 0xe8, 0xe2, 0x75, 0x08, 0x44, 0x3b,
	0xc2, 0x25, 0x08, 0x4f, 0x31, 0x83, 0xec, 0x23, 0xc9, 0x61, 0x46, 0x11, 0x5c, 0xcc, 0x40, 0x83,
	0x85, 0x02, 0xb9, 0x58, 0x40, 0x86, 0x0b, 0x29, 0x11, 0x0e, 0x02, 0x29, 0x65, 0x22, 0x5c, 0xa7,
	0xc4, 0x90, 0xc4, 0x06, 0x8e, 0x18, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0xf4, 0x91,
	0xea, 0xca, 0x01, 0x00, 0x00,
}
