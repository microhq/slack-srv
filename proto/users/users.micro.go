// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/micro/slack-srv/proto/users/users.proto

/*
Package go_micro_srv_slack_users is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/slack-srv/proto/users/users.proto

It has these top-level messages:
	Profile
	User
	GetPresenceRequest
	GetPresenceResponse
	SetPresenceRequest
	SetPresenceResponse
	InfoRequest
	InfoResponse
	ListRequest
	ListResponse
*/
package go_micro_srv_slack_users

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Users service

type UsersService interface {
	GetPresence(ctx context.Context, in *GetPresenceRequest, opts ...client.CallOption) (*GetPresenceResponse, error)
	SetPresence(ctx context.Context, in *SetPresenceRequest, opts ...client.CallOption) (*SetPresenceResponse, error)
	Info(ctx context.Context, in *InfoRequest, opts ...client.CallOption) (*InfoResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
}

type usersService struct {
	c           client.Client
	serviceName string
}

func UsersServiceClient(serviceName string, c client.Client) UsersService {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.slack.users"
	}
	return &usersService{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *usersService) GetPresence(ctx context.Context, in *GetPresenceRequest, opts ...client.CallOption) (*GetPresenceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Users.GetPresence", in)
	out := new(GetPresenceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) SetPresence(ctx context.Context, in *SetPresenceRequest, opts ...client.CallOption) (*SetPresenceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Users.SetPresence", in)
	out := new(SetPresenceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) Info(ctx context.Context, in *InfoRequest, opts ...client.CallOption) (*InfoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Users.Info", in)
	out := new(InfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Users.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Users service

type UsersHandler interface {
	GetPresence(context.Context, *GetPresenceRequest, *GetPresenceResponse) error
	SetPresence(context.Context, *SetPresenceRequest, *SetPresenceResponse) error
	Info(context.Context, *InfoRequest, *InfoResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
}

func RegisterUsersHandler(s server.Server, hdlr UsersHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Users{hdlr}, opts...))
}

type Users struct {
	UsersHandler
}

func (h *Users) GetPresence(ctx context.Context, in *GetPresenceRequest, out *GetPresenceResponse) error {
	return h.UsersHandler.GetPresence(ctx, in, out)
}

func (h *Users) SetPresence(ctx context.Context, in *SetPresenceRequest, out *SetPresenceResponse) error {
	return h.UsersHandler.SetPresence(ctx, in, out)
}

func (h *Users) Info(ctx context.Context, in *InfoRequest, out *InfoResponse) error {
	return h.UsersHandler.Info(ctx, in, out)
}

func (h *Users) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.UsersHandler.List(ctx, in, out)
}
