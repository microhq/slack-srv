// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/micro/slack-srv/proto/channels/channels.proto

/*
Package go_micro_srv_slack is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/slack-srv/proto/channels/channels.proto

It has these top-level messages:
	Channel
	ListRequest
	ListResponse
	HistoryRequest
	HistoryResponse
	InfoRequest
	InfoResponse
	MarkRequest
	MarkResponse
	SetPurposeRequest
	SetPurposeResponse
	SetTopicRequest
	SetTopicResponse
*/
package go_micro_srv_slack

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_micro_srv_slack1 "github.com/micro/slack-srv/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Channel struct {
	Id                 string                       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name               string                       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Created            int64                        `protobuf:"varint,3,opt,name=created" json:"created,omitempty"`
	Creator            string                       `protobuf:"bytes,4,opt,name=creator" json:"creator,omitempty"`
	IsArchived         bool                         `protobuf:"varint,5,opt,name=is_archived,json=isArchived" json:"is_archived,omitempty"`
	IsMember           bool                         `protobuf:"varint,6,opt,name=is_member,json=isMember" json:"is_member,omitempty"`
	IsGeneral          bool                         `protobuf:"varint,7,opt,name=is_general,json=isGeneral" json:"is_general,omitempty"`
	NumMembers         int64                        `protobuf:"varint,8,opt,name=num_members,json=numMembers" json:"num_members,omitempty"`
	Topic              *go_micro_srv_slack1.Topic   `protobuf:"bytes,9,opt,name=topic" json:"topic,omitempty"`
	Purpose            *go_micro_srv_slack1.Purpose `protobuf:"bytes,10,opt,name=purpose" json:"purpose,omitempty"`
	Members            []string                     `protobuf:"bytes,11,rep,name=members" json:"members,omitempty"`
	LatestRead         string                       `protobuf:"bytes,12,opt,name=latest_read,json=latestRead" json:"latest_read,omitempty"`
	Latest             *go_micro_srv_slack1.Message `protobuf:"bytes,13,opt,name=latest" json:"latest,omitempty"`
	UnreadCount        int64                        `protobuf:"varint,14,opt,name=unread_count,json=unreadCount" json:"unread_count,omitempty"`
	UnreadCountDisplay int64                        `protobuf:"varint,15,opt,name=unread_count_display,json=unreadCountDisplay" json:"unread_count_display,omitempty"`
}

func (m *Channel) Reset()                    { *m = Channel{} }
func (m *Channel) String() string            { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()               {}
func (*Channel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Channel) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Channel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Channel) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Channel) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Channel) GetIsArchived() bool {
	if m != nil {
		return m.IsArchived
	}
	return false
}

func (m *Channel) GetIsMember() bool {
	if m != nil {
		return m.IsMember
	}
	return false
}

func (m *Channel) GetIsGeneral() bool {
	if m != nil {
		return m.IsGeneral
	}
	return false
}

func (m *Channel) GetNumMembers() int64 {
	if m != nil {
		return m.NumMembers
	}
	return 0
}

func (m *Channel) GetTopic() *go_micro_srv_slack1.Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *Channel) GetPurpose() *go_micro_srv_slack1.Purpose {
	if m != nil {
		return m.Purpose
	}
	return nil
}

func (m *Channel) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Channel) GetLatestRead() string {
	if m != nil {
		return m.LatestRead
	}
	return ""
}

func (m *Channel) GetLatest() *go_micro_srv_slack1.Message {
	if m != nil {
		return m.Latest
	}
	return nil
}

func (m *Channel) GetUnreadCount() int64 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *Channel) GetUnreadCountDisplay() int64 {
	if m != nil {
		return m.UnreadCountDisplay
	}
	return 0
}

type ListRequest struct {
	ExcludeArchived int64 `protobuf:"varint,1,opt,name=exclude_archived,json=excludeArchived" json:"exclude_archived,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListRequest) GetExcludeArchived() int64 {
	if m != nil {
		return m.ExcludeArchived
	}
	return 0
}

type ListResponse struct {
	Ok       bool       `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error    string     `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Channels []*Channel `protobuf:"bytes,3,rep,name=channels" json:"channels,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ListResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ListResponse) GetChannels() []*Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

type HistoryRequest struct {
	Channel   string  `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Latest    float64 `protobuf:"fixed64,2,opt,name=latest" json:"latest,omitempty"`
	Oldest    float64 `protobuf:"fixed64,3,opt,name=oldest" json:"oldest,omitempty"`
	Inclusive int64   `protobuf:"varint,4,opt,name=inclusive" json:"inclusive,omitempty"`
	Count     int64   `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	Unreads   int64   `protobuf:"varint,6,opt,name=unreads" json:"unreads,omitempty"`
}

func (m *HistoryRequest) Reset()                    { *m = HistoryRequest{} }
func (m *HistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*HistoryRequest) ProtoMessage()               {}
func (*HistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HistoryRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *HistoryRequest) GetLatest() float64 {
	if m != nil {
		return m.Latest
	}
	return 0
}

func (m *HistoryRequest) GetOldest() float64 {
	if m != nil {
		return m.Oldest
	}
	return 0
}

func (m *HistoryRequest) GetInclusive() int64 {
	if m != nil {
		return m.Inclusive
	}
	return 0
}

func (m *HistoryRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *HistoryRequest) GetUnreads() int64 {
	if m != nil {
		return m.Unreads
	}
	return 0
}

type HistoryResponse struct {
	Ok       bool                           `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error    string                         `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Latest   string                         `protobuf:"bytes,3,opt,name=latest" json:"latest,omitempty"`
	Messages []*go_micro_srv_slack1.Message `protobuf:"bytes,4,rep,name=messages" json:"messages,omitempty"`
	HasMore  bool                           `protobuf:"varint,5,opt,name=has_more,json=hasMore" json:"has_more,omitempty"`
}

func (m *HistoryResponse) Reset()                    { *m = HistoryResponse{} }
func (m *HistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*HistoryResponse) ProtoMessage()               {}
func (*HistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HistoryResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *HistoryResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *HistoryResponse) GetLatest() string {
	if m != nil {
		return m.Latest
	}
	return ""
}

func (m *HistoryResponse) GetMessages() []*go_micro_srv_slack1.Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *HistoryResponse) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

type InfoRequest struct {
	Channel string `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *InfoRequest) Reset()                    { *m = InfoRequest{} }
func (m *InfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()               {}
func (*InfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *InfoRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

type InfoResponse struct {
	Ok      bool     `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error   string   `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Channel *Channel `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
}

func (m *InfoResponse) Reset()                    { *m = InfoResponse{} }
func (m *InfoResponse) String() string            { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()               {}
func (*InfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *InfoResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *InfoResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *InfoResponse) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

type MarkRequest struct {
	Channel string  `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Ts      float64 `protobuf:"fixed64,2,opt,name=ts" json:"ts,omitempty"`
}

func (m *MarkRequest) Reset()                    { *m = MarkRequest{} }
func (m *MarkRequest) String() string            { return proto.CompactTextString(m) }
func (*MarkRequest) ProtoMessage()               {}
func (*MarkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MarkRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *MarkRequest) GetTs() float64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

type MarkResponse struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *MarkResponse) Reset()                    { *m = MarkResponse{} }
func (m *MarkResponse) String() string            { return proto.CompactTextString(m) }
func (*MarkResponse) ProtoMessage()               {}
func (*MarkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MarkResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *MarkResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type SetPurposeRequest struct {
	Channel string `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Purpose string `protobuf:"bytes,2,opt,name=purpose" json:"purpose,omitempty"`
}

func (m *SetPurposeRequest) Reset()                    { *m = SetPurposeRequest{} }
func (m *SetPurposeRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPurposeRequest) ProtoMessage()               {}
func (*SetPurposeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SetPurposeRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *SetPurposeRequest) GetPurpose() string {
	if m != nil {
		return m.Purpose
	}
	return ""
}

type SetPurposeResponse struct {
	Ok      bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Purpose string `protobuf:"bytes,3,opt,name=purpose" json:"purpose,omitempty"`
}

func (m *SetPurposeResponse) Reset()                    { *m = SetPurposeResponse{} }
func (m *SetPurposeResponse) String() string            { return proto.CompactTextString(m) }
func (*SetPurposeResponse) ProtoMessage()               {}
func (*SetPurposeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SetPurposeResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *SetPurposeResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *SetPurposeResponse) GetPurpose() string {
	if m != nil {
		return m.Purpose
	}
	return ""
}

type SetTopicRequest struct {
	Channel string `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Topic   string `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
}

func (m *SetTopicRequest) Reset()                    { *m = SetTopicRequest{} }
func (m *SetTopicRequest) String() string            { return proto.CompactTextString(m) }
func (*SetTopicRequest) ProtoMessage()               {}
func (*SetTopicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SetTopicRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *SetTopicRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type SetTopicResponse struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Topic string `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
}

func (m *SetTopicResponse) Reset()                    { *m = SetTopicResponse{} }
func (m *SetTopicResponse) String() string            { return proto.CompactTextString(m) }
func (*SetTopicResponse) ProtoMessage()               {}
func (*SetTopicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SetTopicResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *SetTopicResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *SetTopicResponse) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func init() {
	proto.RegisterType((*Channel)(nil), "go.micro.srv.slack.Channel")
	proto.RegisterType((*ListRequest)(nil), "go.micro.srv.slack.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "go.micro.srv.slack.ListResponse")
	proto.RegisterType((*HistoryRequest)(nil), "go.micro.srv.slack.HistoryRequest")
	proto.RegisterType((*HistoryResponse)(nil), "go.micro.srv.slack.HistoryResponse")
	proto.RegisterType((*InfoRequest)(nil), "go.micro.srv.slack.InfoRequest")
	proto.RegisterType((*InfoResponse)(nil), "go.micro.srv.slack.InfoResponse")
	proto.RegisterType((*MarkRequest)(nil), "go.micro.srv.slack.MarkRequest")
	proto.RegisterType((*MarkResponse)(nil), "go.micro.srv.slack.MarkResponse")
	proto.RegisterType((*SetPurposeRequest)(nil), "go.micro.srv.slack.SetPurposeRequest")
	proto.RegisterType((*SetPurposeResponse)(nil), "go.micro.srv.slack.SetPurposeResponse")
	proto.RegisterType((*SetTopicRequest)(nil), "go.micro.srv.slack.SetTopicRequest")
	proto.RegisterType((*SetTopicResponse)(nil), "go.micro.srv.slack.SetTopicResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Channels service

type ChannelsClient interface {
	History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Mark(ctx context.Context, in *MarkRequest, opts ...grpc.CallOption) (*MarkResponse, error)
	SetPurpose(ctx context.Context, in *SetPurposeRequest, opts ...grpc.CallOption) (*SetPurposeResponse, error)
	SetTopic(ctx context.Context, in *SetTopicRequest, opts ...grpc.CallOption) (*SetTopicResponse, error)
}

type channelsClient struct {
	cc *grpc.ClientConn
}

func NewChannelsClient(cc *grpc.ClientConn) ChannelsClient {
	return &channelsClient{cc}
}

func (c *channelsClient) History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	out := new(HistoryResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.Channels/History", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.Channels/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.Channels/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) Mark(ctx context.Context, in *MarkRequest, opts ...grpc.CallOption) (*MarkResponse, error) {
	out := new(MarkResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.Channels/Mark", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) SetPurpose(ctx context.Context, in *SetPurposeRequest, opts ...grpc.CallOption) (*SetPurposeResponse, error) {
	out := new(SetPurposeResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.Channels/SetPurpose", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) SetTopic(ctx context.Context, in *SetTopicRequest, opts ...grpc.CallOption) (*SetTopicResponse, error) {
	out := new(SetTopicResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.Channels/SetTopic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Channels service

type ChannelsServer interface {
	History(context.Context, *HistoryRequest) (*HistoryResponse, error)
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Mark(context.Context, *MarkRequest) (*MarkResponse, error)
	SetPurpose(context.Context, *SetPurposeRequest) (*SetPurposeResponse, error)
	SetTopic(context.Context, *SetTopicRequest) (*SetTopicResponse, error)
}

func RegisterChannelsServer(s *grpc.Server, srv ChannelsServer) {
	s.RegisterService(&_Channels_serviceDesc, srv)
}

func _Channels_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.Channels/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).History(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.Channels/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.Channels/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_Mark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).Mark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.Channels/Mark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).Mark(ctx, req.(*MarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_SetPurpose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPurposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).SetPurpose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.Channels/SetPurpose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).SetPurpose(ctx, req.(*SetPurposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channels_SetTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).SetTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.Channels/SetTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).SetTopic(ctx, req.(*SetTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Channels_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.srv.slack.Channels",
	HandlerType: (*ChannelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "History",
			Handler:    _Channels_History_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Channels_Info_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Channels_List_Handler,
		},
		{
			MethodName: "Mark",
			Handler:    _Channels_Mark_Handler,
		},
		{
			MethodName: "SetPurpose",
			Handler:    _Channels_SetPurpose_Handler,
		},
		{
			MethodName: "SetTopic",
			Handler:    _Channels_SetTopic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/micro/slack-srv/proto/channels/channels.proto",
}

func init() {
	proto.RegisterFile("github.com/micro/slack-srv/proto/channels/channels.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 796 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x5d, 0x6f, 0xf2, 0x36,
	0x14, 0x6e, 0x08, 0x1f, 0xe1, 0xc0, 0xa0, 0xb3, 0xaa, 0xca, 0xa5, 0x9b, 0xca, 0xd2, 0x7d, 0xb0,
	0x8b, 0xc2, 0xd4, 0xae, 0x6a, 0x6f, 0xab, 0x4e, 0xea, 0xa6, 0x8d, 0x69, 0x4a, 0x2b, 0xed, 0x6a,
	0x42, 0x69, 0xe2, 0x81, 0x45, 0x12, 0x33, 0x3b, 0x41, 0xeb, 0x7f, 0xd8, 0xbf, 0xd8, 0xcd, 0xfb,
	0x2f, 0xdf, 0x57, 0xb6, 0xe3, 0x90, 0xaa, 0xa1, 0x88, 0x3b, 0xce, 0xf1, 0x73, 0x1e, 0x3f, 0x3e,
	0xe7, 0xc9, 0x11, 0x70, 0x3b, 0xa7, 0xe9, 0x22, 0x7b, 0x1e, 0x07, 0x2c, 0x9e, 0xc4, 0x34, 0xe0,
	0x6c, 0x22, 0x22, 0x3f, 0x58, 0x5e, 0x08, 0xbe, 0x9e, 0xac, 0x38, 0x4b, 0xd9, 0x24, 0x58, 0xf8,
	0x49, 0x42, 0x22, 0x51, 0xfc, 0x18, 0xab, 0x3c, 0x42, 0x73, 0x36, 0x56, 0x15, 0x63, 0xc1, 0xd7,
	0x63, 0x55, 0x35, 0xb8, 0xd8, 0xcd, 0xc6, 0xe2, 0x98, 0x25, 0x9a, 0xc2, 0xfd, 0xaf, 0x0e, 0xad,
	0x7b, 0xcd, 0x8a, 0x7a, 0x50, 0xa3, 0x21, 0xb6, 0x86, 0xd6, 0xa8, 0xed, 0xd5, 0x68, 0x88, 0x10,
	0xd4, 0x13, 0x3f, 0x26, 0xb8, 0xa6, 0x32, 0xea, 0x37, 0xc2, 0xd0, 0x0a, 0x38, 0xf1, 0x53, 0x12,
	0x62, 0x7b, 0x68, 0x8d, 0x6c, 0xcf, 0x84, 0xc5, 0x09, 0xe3, 0xb8, 0xae, 0x0a, 0x4c, 0x88, 0xce,
	0xa0, 0x43, 0xc5, 0xcc, 0xe7, 0xc1, 0x82, 0xae, 0x49, 0x88, 0x1b, 0x43, 0x6b, 0xe4, 0x78, 0x40,
	0xc5, 0x5d, 0x9e, 0x41, 0xa7, 0xd0, 0xa6, 0x62, 0x16, 0x93, 0xf8, 0x99, 0x70, 0xdc, 0x54, 0xc7,
	0x0e, 0x15, 0x53, 0x15, 0xa3, 0x2f, 0x01, 0xa8, 0x98, 0xcd, 0x49, 0x42, 0xb8, 0x1f, 0xe1, 0x96,
	0x3a, 0x6d, 0x53, 0xf1, 0xa0, 0x13, 0x92, 0x3c, 0xc9, 0xe2, 0xbc, 0x58, 0x60, 0x47, 0x89, 0x82,
	0x24, 0x8b, 0x75, 0xb9, 0x40, 0x13, 0x68, 0xa4, 0x6c, 0x45, 0x03, 0xdc, 0x1e, 0x5a, 0xa3, 0xce,
	0xe5, 0xc9, 0xf8, 0x6d, 0xd3, 0xc6, 0x4f, 0x12, 0xe0, 0x69, 0x1c, 0xba, 0x86, 0xd6, 0x2a, 0xe3,
	0x2b, 0x26, 0x08, 0x06, 0x55, 0x72, 0x5a, 0x55, 0xf2, 0x87, 0x86, 0x78, 0x06, 0x2b, 0xdf, 0x6f,
	0x44, 0x74, 0x86, 0xb6, 0x7c, 0x7f, 0x1e, 0x4a, 0x89, 0x91, 0x9f, 0x12, 0x91, 0xce, 0x38, 0xf1,
	0x43, 0xdc, 0x55, 0xdd, 0x01, 0x9d, 0xf2, 0x88, 0x1f, 0xa2, 0x2b, 0x68, 0xea, 0x08, 0x7f, 0xb6,
	0xfd, 0xc2, 0x29, 0x11, 0xc2, 0x9f, 0x13, 0x2f, 0x87, 0xa2, 0xaf, 0xa0, 0x9b, 0x25, 0x92, 0x70,
	0x16, 0xb0, 0x2c, 0x49, 0x71, 0x4f, 0xbd, 0xbc, 0xa3, 0x73, 0xf7, 0x32, 0x85, 0x7e, 0x80, 0xa3,
	0x32, 0x64, 0x16, 0x52, 0xb1, 0x8a, 0xfc, 0x17, 0xdc, 0x57, 0x50, 0x54, 0x82, 0xfe, 0xa4, 0x4f,
	0xdc, 0x5b, 0xe8, 0xfc, 0x46, 0xa5, 0xaa, 0x7f, 0x32, 0x79, 0xc7, 0xf7, 0x70, 0x48, 0xfe, 0x0d,
	0xa2, 0x2c, 0x24, 0x9b, 0xf1, 0x59, 0xaa, 0xb8, 0x9f, 0xe7, 0xcd, 0x0c, 0xdd, 0x18, 0xba, 0xba,
	0x52, 0xac, 0x58, 0x22, 0x88, 0x34, 0x13, 0x5b, 0x2a, 0xb0, 0xe3, 0xd5, 0xd8, 0x12, 0x1d, 0x41,
	0x83, 0x70, 0xce, 0x78, 0xee, 0x26, 0x1d, 0xa0, 0x1b, 0x70, 0x8c, 0xa7, 0xb1, 0x3d, 0xb4, 0xb7,
	0xbd, 0x3d, 0x77, 0xa8, 0x57, 0x80, 0xdd, 0x0f, 0x16, 0xf4, 0x7e, 0xa6, 0x22, 0x65, 0xfc, 0xc5,
	0x88, 0x95, 0x06, 0xd4, 0xc7, 0xb9, 0x87, 0x4d, 0x88, 0x8e, 0x8b, 0xfe, 0xca, 0xcb, 0xad, 0xa2,
	0x85, 0xc7, 0xd0, 0x64, 0x51, 0x28, 0xf3, 0xb6, 0xce, 0xeb, 0x08, 0x7d, 0x01, 0x6d, 0x9a, 0x04,
	0x51, 0x26, 0xe8, 0x9a, 0x28, 0x33, 0xdb, 0xde, 0x26, 0x21, 0x5f, 0xa2, 0x3b, 0xde, 0x50, 0x27,
	0x3a, 0x90, 0xb7, 0xeb, 0x7e, 0x0a, 0xe5, 0x60, 0xdb, 0x33, 0xa1, 0xfb, 0xbf, 0x05, 0xfd, 0x42,
	0xea, 0x5e, 0xdd, 0xd9, 0xe8, 0xb6, 0x55, 0xda, 0xe8, 0xbe, 0x01, 0x27, 0xd6, 0x6e, 0x10, 0xb8,
	0xbe, 0xbd, 0x6b, 0xc6, 0x31, 0x05, 0x18, 0x9d, 0x80, 0xb3, 0xf0, 0xc5, 0x2c, 0x66, 0x9c, 0xe4,
	0x9f, 0x61, 0x6b, 0xe1, 0x8b, 0x29, 0xe3, 0xc4, 0xfd, 0x0e, 0x3a, 0xbf, 0x24, 0x7f, 0xb3, 0x9d,
	0xcd, 0x74, 0x97, 0xd0, 0xd5, 0xc0, 0xbd, 0x9e, 0x72, 0xbd, 0xe1, 0xb3, 0xb7, 0x7b, 0xdc, 0xcc,
	0xb9, 0xb8, 0xec, 0x06, 0x3a, 0x53, 0x9f, 0x2f, 0x77, 0x8f, 0xb8, 0x07, 0xb5, 0x54, 0xe4, 0xe3,
	0xad, 0xa5, 0xc2, 0xfd, 0x11, 0xba, 0xba, 0x70, 0x1f, 0x95, 0xee, 0x03, 0x7c, 0xfe, 0x48, 0x52,
	0xf3, 0x69, 0xef, 0xbc, 0x14, 0x6f, 0x36, 0x85, 0xa6, 0x31, 0xa1, 0xfb, 0x04, 0xa8, 0x4c, 0xb4,
	0x57, 0xab, 0x4a, 0xac, 0xf6, 0x6b, 0xd6, 0x3b, 0xe8, 0x3f, 0x92, 0x54, 0x2f, 0xab, 0x9d, 0xe2,
	0x8e, 0xcc, 0xde, 0xcb, 0xc9, 0x55, 0xe0, 0xfe, 0x0e, 0x87, 0x1b, 0x8a, 0xbd, 0x64, 0x15, 0x7c,
	0x76, 0x89, 0xef, 0xf2, 0xa3, 0x0d, 0x4e, 0x3e, 0x35, 0x81, 0x9e, 0xa0, 0x95, 0x1b, 0x1d, 0xb9,
	0x55, 0xe3, 0x7d, 0xfd, 0xc1, 0x0e, 0xce, 0xdf, 0xc5, 0x68, 0x71, 0xee, 0x01, 0xfa, 0x15, 0xea,
	0xd2, 0x70, 0xe8, 0xac, 0x0a, 0x5e, 0xf2, 0xec, 0x60, 0xb8, 0x1d, 0x50, 0x26, 0x93, 0x6b, 0xaa,
	0x9a, 0xac, 0xb4, 0xfa, 0xaa, 0xc9, 0xca, 0x1b, 0x4e, 0x93, 0x49, 0x93, 0x55, 0x93, 0x95, 0x7c,
	0x5b, 0x4d, 0x56, 0xf6, 0xa7, 0x7b, 0x80, 0xfe, 0x02, 0xd8, 0x58, 0x06, 0x7d, 0x53, 0x55, 0xf1,
	0xc6, 0x9b, 0x83, 0x6f, 0x77, 0xc1, 0x0a, 0xfa, 0x3f, 0xc1, 0x31, 0x83, 0x47, 0xe7, 0x5b, 0xaa,
	0xca, 0xce, 0x1a, 0x7c, 0xfd, 0x3e, 0xc8, 0x10, 0x3f, 0x37, 0xd5, 0x1f, 0x89, 0xab, 0x4f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x5f, 0x11, 0x25, 0x92, 0xc7, 0x08, 0x00, 0x00,
}
