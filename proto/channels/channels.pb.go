// Code generated by protoc-gen-go.
// source: github.com/micro/slack-srv/proto/channels/channels.proto
// DO NOT EDIT!

/*
Package go_micro_srv_slack is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/slack-srv/proto/channels/channels.proto

It has these top-level messages:
	Channel
	Topic
	Purpose
	ListRequest
	ListResponse
	HistoryRequest
	HistoryResponse
	InfoRequest
	InfoResponse
	MarkRequest
	MarkResponse
	SetPurposeRequest
	SetPurposeResponse
	SetTopicRequest
	SetTopicResponse
*/
package go_micro_srv_slack

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_micro_srv_slack1 "github.com/micro/slack-srv/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Channel struct {
	Id                 string                       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name               string                       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Created            int64                        `protobuf:"varint,3,opt,name=created" json:"created,omitempty"`
	Creator            string                       `protobuf:"bytes,4,opt,name=creator" json:"creator,omitempty"`
	IsArchived         bool                         `protobuf:"varint,5,opt,name=is_archived" json:"is_archived,omitempty"`
	IsMember           bool                         `protobuf:"varint,6,opt,name=is_member" json:"is_member,omitempty"`
	IsGeneral          bool                         `protobuf:"varint,7,opt,name=is_general" json:"is_general,omitempty"`
	NumMembers         int64                        `protobuf:"varint,8,opt,name=num_members" json:"num_members,omitempty"`
	Topic              *Topic                       `protobuf:"bytes,9,opt,name=topic" json:"topic,omitempty"`
	Purpose            *Purpose                     `protobuf:"bytes,10,opt,name=purpose" json:"purpose,omitempty"`
	Members            []string                     `protobuf:"bytes,11,rep,name=members" json:"members,omitempty"`
	LatestRead         string                       `protobuf:"bytes,12,opt,name=latest_read" json:"latest_read,omitempty"`
	Latest             *go_micro_srv_slack1.Message `protobuf:"bytes,13,opt,name=latest" json:"latest,omitempty"`
	UnreadCount        int64                        `protobuf:"varint,14,opt,name=unread_count" json:"unread_count,omitempty"`
	UnreadCountDisplay int64                        `protobuf:"varint,15,opt,name=unread_count_display" json:"unread_count_display,omitempty"`
}

func (m *Channel) Reset()                    { *m = Channel{} }
func (m *Channel) String() string            { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()               {}
func (*Channel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Channel) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *Channel) GetPurpose() *Purpose {
	if m != nil {
		return m.Purpose
	}
	return nil
}

func (m *Channel) GetLatest() *go_micro_srv_slack1.Message {
	if m != nil {
		return m.Latest
	}
	return nil
}

type Topic struct {
	Value   string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	Creator string `protobuf:"bytes,2,opt,name=creator" json:"creator,omitempty"`
	LastSet int64  `protobuf:"varint,3,opt,name=last_set" json:"last_set,omitempty"`
}

func (m *Topic) Reset()                    { *m = Topic{} }
func (m *Topic) String() string            { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()               {}
func (*Topic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Purpose struct {
	Value   string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	Creator string `protobuf:"bytes,2,opt,name=creator" json:"creator,omitempty"`
	LastSet int64  `protobuf:"varint,3,opt,name=last_set" json:"last_set,omitempty"`
}

func (m *Purpose) Reset()                    { *m = Purpose{} }
func (m *Purpose) String() string            { return proto.CompactTextString(m) }
func (*Purpose) ProtoMessage()               {}
func (*Purpose) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ListRequest struct {
	ExcludeArchived int64 `protobuf:"varint,1,opt,name=exclude_archived" json:"exclude_archived,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ListResponse struct {
	Ok       bool       `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error    string     `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Channels []*Channel `protobuf:"bytes,3,rep,name=channels" json:"channels,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListResponse) GetChannels() []*Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

type HistoryRequest struct {
	Channel   string  `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Latest    float64 `protobuf:"fixed64,2,opt,name=latest" json:"latest,omitempty"`
	Oldest    float64 `protobuf:"fixed64,3,opt,name=oldest" json:"oldest,omitempty"`
	Inclusive int64   `protobuf:"varint,4,opt,name=inclusive" json:"inclusive,omitempty"`
	Count     int64   `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	Unreads   int64   `protobuf:"varint,6,opt,name=unreads" json:"unreads,omitempty"`
}

func (m *HistoryRequest) Reset()                    { *m = HistoryRequest{} }
func (m *HistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*HistoryRequest) ProtoMessage()               {}
func (*HistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type HistoryResponse struct {
	Ok       bool                           `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error    string                         `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Latest   string                         `protobuf:"bytes,3,opt,name=latest" json:"latest,omitempty"`
	Messages []*go_micro_srv_slack1.Message `protobuf:"bytes,4,rep,name=messages" json:"messages,omitempty"`
	HasMore  bool                           `protobuf:"varint,5,opt,name=has_more" json:"has_more,omitempty"`
}

func (m *HistoryResponse) Reset()                    { *m = HistoryResponse{} }
func (m *HistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*HistoryResponse) ProtoMessage()               {}
func (*HistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *HistoryResponse) GetMessages() []*go_micro_srv_slack1.Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type InfoRequest struct {
	Channel string `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *InfoRequest) Reset()                    { *m = InfoRequest{} }
func (m *InfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()               {}
func (*InfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type InfoResponse struct {
	Ok      bool     `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error   string   `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Channel *Channel `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
}

func (m *InfoResponse) Reset()                    { *m = InfoResponse{} }
func (m *InfoResponse) String() string            { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()               {}
func (*InfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *InfoResponse) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

type MarkRequest struct {
	Channel string  `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Ts      float64 `protobuf:"fixed64,2,opt,name=ts" json:"ts,omitempty"`
}

func (m *MarkRequest) Reset()                    { *m = MarkRequest{} }
func (m *MarkRequest) String() string            { return proto.CompactTextString(m) }
func (*MarkRequest) ProtoMessage()               {}
func (*MarkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type MarkResponse struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *MarkResponse) Reset()                    { *m = MarkResponse{} }
func (m *MarkResponse) String() string            { return proto.CompactTextString(m) }
func (*MarkResponse) ProtoMessage()               {}
func (*MarkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type SetPurposeRequest struct {
	Channel string `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Purpose string `protobuf:"bytes,2,opt,name=purpose" json:"purpose,omitempty"`
}

func (m *SetPurposeRequest) Reset()                    { *m = SetPurposeRequest{} }
func (m *SetPurposeRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPurposeRequest) ProtoMessage()               {}
func (*SetPurposeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type SetPurposeResponse struct {
	Ok      bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Purpose string `protobuf:"bytes,3,opt,name=purpose" json:"purpose,omitempty"`
}

func (m *SetPurposeResponse) Reset()                    { *m = SetPurposeResponse{} }
func (m *SetPurposeResponse) String() string            { return proto.CompactTextString(m) }
func (*SetPurposeResponse) ProtoMessage()               {}
func (*SetPurposeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type SetTopicRequest struct {
	Channel string `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Topic   string `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
}

func (m *SetTopicRequest) Reset()                    { *m = SetTopicRequest{} }
func (m *SetTopicRequest) String() string            { return proto.CompactTextString(m) }
func (*SetTopicRequest) ProtoMessage()               {}
func (*SetTopicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type SetTopicResponse struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Topic string `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
}

func (m *SetTopicResponse) Reset()                    { *m = SetTopicResponse{} }
func (m *SetTopicResponse) String() string            { return proto.CompactTextString(m) }
func (*SetTopicResponse) ProtoMessage()               {}
func (*SetTopicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func init() {
	proto.RegisterType((*Channel)(nil), "go.micro.srv.slack.Channel")
	proto.RegisterType((*Topic)(nil), "go.micro.srv.slack.Topic")
	proto.RegisterType((*Purpose)(nil), "go.micro.srv.slack.Purpose")
	proto.RegisterType((*ListRequest)(nil), "go.micro.srv.slack.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "go.micro.srv.slack.ListResponse")
	proto.RegisterType((*HistoryRequest)(nil), "go.micro.srv.slack.HistoryRequest")
	proto.RegisterType((*HistoryResponse)(nil), "go.micro.srv.slack.HistoryResponse")
	proto.RegisterType((*InfoRequest)(nil), "go.micro.srv.slack.InfoRequest")
	proto.RegisterType((*InfoResponse)(nil), "go.micro.srv.slack.InfoResponse")
	proto.RegisterType((*MarkRequest)(nil), "go.micro.srv.slack.MarkRequest")
	proto.RegisterType((*MarkResponse)(nil), "go.micro.srv.slack.MarkResponse")
	proto.RegisterType((*SetPurposeRequest)(nil), "go.micro.srv.slack.SetPurposeRequest")
	proto.RegisterType((*SetPurposeResponse)(nil), "go.micro.srv.slack.SetPurposeResponse")
	proto.RegisterType((*SetTopicRequest)(nil), "go.micro.srv.slack.SetTopicRequest")
	proto.RegisterType((*SetTopicResponse)(nil), "go.micro.srv.slack.SetTopicResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Channels service

type ChannelsClient interface {
	History(ctx context.Context, in *HistoryRequest) (*HistoryResponse, error)
	Info(ctx context.Context, in *InfoRequest) (*InfoResponse, error)
	List(ctx context.Context, in *ListRequest) (*ListResponse, error)
	Mark(ctx context.Context, in *MarkRequest) (*MarkResponse, error)
	SetPurpose(ctx context.Context, in *SetPurposeRequest) (*SetPurposeResponse, error)
	SetTopic(ctx context.Context, in *SetTopicRequest) (*SetTopicResponse, error)
}

type channelsClient struct {
	c client.Client
}

func NewChannelsClient(c client.Client) ChannelsClient {
	if c == nil {
		c = client.NewClient()
	}
	return &channelsClient{
		c: c,
	}
}

func (c *channelsClient) History(ctx context.Context, in *HistoryRequest) (*HistoryResponse, error) {
	req := c.c.NewRequest("go.micro.srv.slack", "Channels.History", in)
	out := new(HistoryResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) Info(ctx context.Context, in *InfoRequest) (*InfoResponse, error) {
	req := c.c.NewRequest("go.micro.srv.slack", "Channels.Info", in)
	out := new(InfoResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) List(ctx context.Context, in *ListRequest) (*ListResponse, error) {
	req := c.c.NewRequest("go.micro.srv.slack", "Channels.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) Mark(ctx context.Context, in *MarkRequest) (*MarkResponse, error) {
	req := c.c.NewRequest("go.micro.srv.slack", "Channels.Mark", in)
	out := new(MarkResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) SetPurpose(ctx context.Context, in *SetPurposeRequest) (*SetPurposeResponse, error) {
	req := c.c.NewRequest("go.micro.srv.slack", "Channels.SetPurpose", in)
	out := new(SetPurposeResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsClient) SetTopic(ctx context.Context, in *SetTopicRequest) (*SetTopicResponse, error) {
	req := c.c.NewRequest("go.micro.srv.slack", "Channels.SetTopic", in)
	out := new(SetTopicResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Channels service

type ChannelsServer interface {
	History(context.Context, *HistoryRequest, *HistoryResponse) error
	Info(context.Context, *InfoRequest, *InfoResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
	Mark(context.Context, *MarkRequest, *MarkResponse) error
	SetPurpose(context.Context, *SetPurposeRequest, *SetPurposeResponse) error
	SetTopic(context.Context, *SetTopicRequest, *SetTopicResponse) error
}

func RegisterChannelsServer(s server.Server, srv ChannelsServer) {
	s.Handle(s.NewHandler(srv))
}

var fileDescriptor0 = []byte{
	// 700 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x55, 0xdf, 0x6f, 0xd3, 0x3c,
	0x14, 0xfd, 0xba, 0xac, 0x6b, 0x76, 0xdb, 0xad, 0x9b, 0xbf, 0x3d, 0x98, 0x82, 0x60, 0xca, 0xf8,
	0x31, 0x60, 0x4b, 0xc5, 0x10, 0x12, 0x08, 0x1e, 0x90, 0x78, 0x01, 0xc1, 0x24, 0x04, 0x93, 0xc6,
	0x0b, 0xaa, 0xbc, 0xd4, 0xb4, 0xd1, 0x92, 0xb8, 0xd8, 0xc9, 0xc4, 0x1e, 0xf8, 0xb3, 0x79, 0x86,
	0x6b, 0x3b, 0x49, 0x83, 0x96, 0x2c, 0xe2, 0x6d, 0xbe, 0x39, 0xf7, 0x9c, 0x7b, 0x8f, 0x8f, 0x57,
	0x78, 0x3e, 0x0b, 0xd3, 0x79, 0x76, 0xe6, 0x07, 0x22, 0x1e, 0xc7, 0x61, 0x20, 0xc5, 0x58, 0x45,
	0x2c, 0x38, 0x3f, 0x54, 0xf2, 0x62, 0xbc, 0x90, 0x22, 0x15, 0xe3, 0x60, 0xce, 0x92, 0x84, 0x47,
	0xaa, 0xfc, 0xc3, 0x37, 0x75, 0x42, 0x66, 0xc2, 0x37, 0x1d, 0x3e, 0x62, 0x7d, 0xd3, 0x35, 0x3a,
	0x6c, 0x67, 0x13, 0x71, 0x2c, 0x12, 0x4b, 0xe1, 0xfd, 0x5a, 0x81, 0xde, 0x1b, 0xcb, 0x4a, 0x00,
	0x56, 0xc2, 0x29, 0xed, 0xec, 0x76, 0xf6, 0xd7, 0xc9, 0x00, 0x56, 0x13, 0x16, 0x73, 0xba, 0x62,
	0x4e, 0x43, 0xe8, 0x05, 0x92, 0xb3, 0x94, 0x4f, 0xa9, 0x83, 0x05, 0xa7, 0x2c, 0x08, 0x49, 0x57,
	0x0d, 0xe2, 0x7f, 0xe8, 0x87, 0x6a, 0xc2, 0x64, 0x30, 0x0f, 0x2f, 0x10, 0xd5, 0xc5, 0xa2, 0x4b,
	0xb6, 0x61, 0x1d, 0x8b, 0x31, 0x8f, 0xcf, 0xb8, 0xa4, 0x6b, 0xa6, 0x84, 0x22, 0x58, 0x9a, 0xf1,
	0x84, 0x4b, 0x16, 0xd1, 0x9e, 0xa9, 0x61, 0x6f, 0x92, 0xc5, 0x39, 0x4e, 0x51, 0xd7, 0x28, 0xec,
	0x43, 0x37, 0x15, 0x8b, 0x30, 0xa0, 0xeb, 0x78, 0xec, 0x1f, 0xdd, 0xf0, 0xaf, 0xee, 0xea, 0x9f,
	0x68, 0x00, 0x39, 0x80, 0xde, 0x22, 0x93, 0x0b, 0xa1, 0x38, 0x05, 0x83, 0xbd, 0x59, 0x87, 0xfd,
	0x68, 0x21, 0x7a, 0xf2, 0x42, 0xa8, 0xbf, 0xeb, 0xd8, 0xc9, 0x23, 0xdc, 0x4c, 0xa5, 0x13, 0x5c,
	0x68, 0x4a, 0x07, 0x66, 0x9d, 0xc7, 0xb0, 0x66, 0x8b, 0x74, 0xa3, 0x99, 0xf2, 0x98, 0x2b, 0xc5,
	0x66, 0x9c, 0xec, 0xc0, 0x20, 0x4b, 0x74, 0xf3, 0x24, 0x10, 0x59, 0x92, 0xd2, 0x4d, 0xb3, 0xc0,
	0x2d, 0xd8, 0xa9, 0x56, 0x27, 0xd3, 0x50, 0x2d, 0x22, 0x76, 0x49, 0x87, 0xfa, 0xab, 0xf7, 0x02,
	0xba, 0x76, 0xfa, 0x0d, 0xe8, 0x5e, 0xb0, 0x28, 0xe3, 0xb9, 0xef, 0x15, 0x63, 0xad, 0xf5, 0x5b,
	0xe0, 0x46, 0x0c, 0x87, 0x53, 0x3c, 0xb5, 0xde, 0x7b, 0x2f, 0xa1, 0x57, 0x2c, 0xf3, 0xef, 0xcd,
	0x0f, 0xa0, 0xff, 0x21, 0x54, 0xe9, 0x27, 0xfe, 0x3d, 0xc3, 0xed, 0x08, 0x85, 0x2d, 0xfe, 0x23,
	0x88, 0xb2, 0x29, 0x5f, 0xde, 0x5d, 0xc7, 0x00, 0xbf, 0xc0, 0xc0, 0x02, 0xd5, 0x42, 0x24, 0x28,
	0x85, 0xe1, 0x10, 0xe7, 0xe6, 0x9b, 0xab, 0x65, 0xb9, 0x94, 0xa5, 0xca, 0x21, 0xb8, 0x45, 0x30,
	0x51, 0xc5, 0x69, 0xb2, 0x2b, 0x8f, 0x99, 0x97, 0xc2, 0xe6, 0x5b, 0x64, 0x16, 0xf2, 0xb2, 0x98,
	0x42, 0xcf, 0x6d, 0x3f, 0xe6, 0x8b, 0x6c, 0x96, 0xf6, 0x6b, 0x85, 0x8e, 0x3e, 0x8b, 0x68, 0xaa,
	0xcf, 0x8e, 0x39, 0xeb, 0x60, 0x25, 0x38, 0xb6, 0xc2, 0x81, 0x4d, 0x00, 0x1d, 0x3d, 0x93, 0x75,
	0xbf, 0x5b, 0x04, 0xd4, 0xba, 0xaf, 0x4c, 0xf0, 0x1c, 0xef, 0x27, 0x0c, 0x4b, 0xd5, 0xf6, 0x95,
	0x96, 0x03, 0x38, 0xc5, 0x8a, 0xb1, 0xbd, 0x6d, 0x85, 0x7a, 0x4e, 0x5b, 0x22, 0xd0, 0xf7, 0x39,
	0xc3, 0xe4, 0x0b, 0xc9, 0xed, 0x53, 0xf0, 0x6e, 0x43, 0xff, 0x5d, 0xf2, 0x4d, 0x34, 0x6d, 0xec,
	0x9d, 0xc2, 0xc0, 0x7e, 0x6f, 0x9f, 0xed, 0x60, 0xd9, 0xeb, 0x34, 0x87, 0xb3, 0x70, 0xfb, 0x11,
	0xf4, 0x8f, 0x99, 0x3c, 0x6f, 0xb4, 0x1a, 0x85, 0x52, 0x65, 0x6d, 0xf6, 0x1e, 0xc2, 0xc0, 0x62,
	0x5b, 0x87, 0xf0, 0x9e, 0xc1, 0xf6, 0x67, 0x9e, 0xe6, 0x39, 0x6c, 0x24, 0x1f, 0x2e, 0x9f, 0xa6,
	0x6d, 0x7b, 0x0d, 0xa4, 0xda, 0xd6, 0xbe, 0x6c, 0x85, 0xc1, 0xdc, 0x84, 0xf7, 0x04, 0x86, 0xc8,
	0x60, 0xde, 0x4e, 0xa3, 0xec, 0x46, 0xf1, 0xbf, 0xc3, 0x8a, 0xbe, 0x82, 0xad, 0x65, 0x4b, 0xbb,
	0x64, 0xd9, 0x6d, 0x04, 0x8f, 0x7e, 0x3b, 0xe0, 0xe6, 0x66, 0x2a, 0x72, 0x02, 0xbd, 0x3c, 0x45,
	0xc4, 0xab, 0x73, 0xfd, 0xef, 0x60, 0x8f, 0xf6, 0xae, 0xc5, 0xd8, 0x51, 0xbc, 0xff, 0xc8, 0x7b,
	0x58, 0xd5, 0x97, 0x4f, 0xee, 0xd4, 0xc1, 0x2b, 0xb1, 0x19, 0xed, 0x36, 0x03, 0xaa, 0x64, 0xfa,
	0xe1, 0xd6, 0x93, 0x55, 0xde, 0x7e, 0x3d, 0x59, 0xf5, 0xcd, 0x5b, 0x32, 0x9d, 0x88, 0x7a, 0xb2,
	0x4a, 0xae, 0xea, 0xc9, 0xaa, 0x61, 0x42, 0xb2, 0xaf, 0x00, 0xcb, 0xcb, 0x27, 0xf7, 0xea, 0x3a,
	0xae, 0x64, 0x6a, 0x74, 0xbf, 0x0d, 0x56, 0xd2, 0x9f, 0x82, 0x5b, 0x5c, 0x33, 0xd9, 0x6b, 0xe8,
	0xaa, 0xe6, 0x66, 0x74, 0xf7, 0x7a, 0x50, 0x41, 0x7c, 0xb6, 0x66, 0x7e, 0x2a, 0x9f, 0xfe, 0x09,
	0x00, 0x00, 0xff, 0xff, 0xe1, 0x30, 0x95, 0x60, 0xa9, 0x07, 0x00, 0x00,
}
