// Code generated by protoc-gen-go.
// source: github.com/micro/slack-srv/proto/emoji/emoji.proto
// DO NOT EDIT!

/*
Package go_micro_srv_slack is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/slack-srv/proto/emoji/emoji.proto

It has these top-level messages:
	EmojiListRequest
	EmojiListResponse
*/
package go_micro_srv_slack

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EmojiListRequest struct {
}

func (m *EmojiListRequest) Reset()                    { *m = EmojiListRequest{} }
func (m *EmojiListRequest) String() string            { return proto.CompactTextString(m) }
func (*EmojiListRequest) ProtoMessage()               {}
func (*EmojiListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type EmojiListResponse struct {
	Ok    bool              `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string            `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Emoji map[string]string `protobuf:"bytes,3,rep,name=emoji" json:"emoji,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *EmojiListResponse) Reset()                    { *m = EmojiListResponse{} }
func (m *EmojiListResponse) String() string            { return proto.CompactTextString(m) }
func (*EmojiListResponse) ProtoMessage()               {}
func (*EmojiListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EmojiListResponse) GetEmoji() map[string]string {
	if m != nil {
		return m.Emoji
	}
	return nil
}

func init() {
	proto.RegisterType((*EmojiListRequest)(nil), "go.micro.srv.slack.EmojiListRequest")
	proto.RegisterType((*EmojiListResponse)(nil), "go.micro.srv.slack.EmojiListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Emoji service

type EmojiClient interface {
	List(ctx context.Context, in *EmojiListRequest) (*EmojiListResponse, error)
}

type emojiClient struct {
	c client.Client
}

func NewEmojiClient(c client.Client) EmojiClient {
	if c == nil {
		c = client.NewClient()
	}
	return &emojiClient{
		c: c,
	}
}

func (c *emojiClient) List(ctx context.Context, in *EmojiListRequest) (*EmojiListResponse, error) {
	req := c.c.NewRequest("go.micro.srv.slack", "Emoji.List", in)
	out := new(EmojiListResponse)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Emoji service

type EmojiServer interface {
	List(context.Context, *EmojiListRequest, *EmojiListResponse) error
}

func RegisterEmojiServer(s server.Server, srv EmojiServer) {
	s.Handle(s.NewHandler(srv))
}

var fileDescriptor0 = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x32, 0x4a, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0xcd, 0x4c, 0x2e, 0xca, 0xd7, 0x2f, 0xce, 0x49,
	0x4c, 0xce, 0xd6, 0x2d, 0x2e, 0x2a, 0xd3, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0xcd, 0xcd,
	0xcf, 0xca, 0x84, 0x90, 0x7a, 0x60, 0x11, 0x21, 0xa1, 0xf4, 0x7c, 0x3d, 0xb0, 0x5a, 0x3d, 0xa0,
	0x2a, 0x3d, 0xb0, 0x7a, 0x25, 0x21, 0x2e, 0x01, 0x57, 0x90, 0x12, 0x9f, 0xcc, 0xe2, 0x92, 0xa0,
	0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0xa5, 0xb9, 0x8c, 0x5c, 0x82, 0x48, 0x82, 0xc5, 0x05, 0xf9,
	0x79, 0xc5, 0xa9, 0x42, 0x5c, 0x5c, 0x4c, 0xf9, 0xd9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x1c, 0x42,
	0xbc, 0x5c, 0xac, 0xa9, 0x45, 0x45, 0xf9, 0x45, 0x12, 0x4c, 0x40, 0x2e, 0xa7, 0x90, 0x3d, 0x90,
	0x0b, 0x52, 0x2f, 0xc1, 0xac, 0xc0, 0xac, 0xc1, 0x6d, 0x64, 0xa0, 0x87, 0x69, 0x91, 0x1e, 0x86,
	0x81, 0x10, 0x11, 0xd7, 0xbc, 0x92, 0xa2, 0x4a, 0x29, 0x1d, 0x2e, 0x2e, 0x04, 0x4f, 0x88, 0x9b,
	0x8b, 0x39, 0x3b, 0xb5, 0x12, 0x6c, 0x15, 0x27, 0xc8, 0xaa, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0x88,
	0x55, 0x56, 0x4c, 0x16, 0x8c, 0x46, 0x71, 0x5c, 0xac, 0x60, 0xd5, 0x42, 0xa1, 0x5c, 0x2c, 0x20,
	0x13, 0x85, 0x54, 0x08, 0x58, 0x08, 0xf6, 0x96, 0x94, 0x2a, 0x51, 0xce, 0x52, 0x62, 0x48, 0x62,
	0x03, 0x07, 0x97, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x92, 0x66, 0xbe, 0x07, 0x64, 0x01, 0x00,
	0x00,
}
