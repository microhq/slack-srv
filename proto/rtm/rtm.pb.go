// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/micro/slack-srv/proto/rtm/rtm.proto

/*
Package go_micro_srv_slack_rtm is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/slack-srv/proto/rtm/rtm.proto

It has these top-level messages:
	StartRequest
	StartResponse
*/
package go_micro_srv_slack_rtm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StartRequest struct {
	SimpleLatest bool `protobuf:"varint,1,opt,name=simple_latest,json=simpleLatest" json:"simple_latest,omitempty"`
	NoUnreads    bool `protobuf:"varint,2,opt,name=no_unreads,json=noUnreads" json:"no_unreads,omitempty"`
	MpimAware    bool `protobuf:"varint,3,opt,name=mpim_aware,json=mpimAware" json:"mpim_aware,omitempty"`
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StartRequest) GetSimpleLatest() bool {
	if m != nil {
		return m.SimpleLatest
	}
	return false
}

func (m *StartRequest) GetNoUnreads() bool {
	if m != nil {
		return m.NoUnreads
	}
	return false
}

func (m *StartRequest) GetMpimAware() bool {
	if m != nil {
		return m.MpimAware
	}
	return false
}

type StartResponse struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *StartResponse) Reset()                    { *m = StartResponse{} }
func (m *StartResponse) String() string            { return proto.CompactTextString(m) }
func (*StartResponse) ProtoMessage()               {}
func (*StartResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StartResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *StartResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*StartRequest)(nil), "go.micro.srv.slack.rtm.StartRequest")
	proto.RegisterType((*StartResponse)(nil), "go.micro.srv.slack.rtm.StartResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Rtm service

type RtmClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
}

type rtmClient struct {
	cc *grpc.ClientConn
}

func NewRtmClient(cc *grpc.ClientConn) RtmClient {
	return &rtmClient{cc}
}

func (c *rtmClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.rtm.Rtm/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rtm service

type RtmServer interface {
	Start(context.Context, *StartRequest) (*StartResponse, error)
}

func RegisterRtmServer(s *grpc.Server, srv RtmServer) {
	s.RegisterService(&_Rtm_serviceDesc, srv)
}

func _Rtm_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RtmServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.rtm.Rtm/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RtmServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rtm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.srv.slack.rtm.Rtm",
	HandlerType: (*RtmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Rtm_Start_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/micro/slack-srv/proto/rtm/rtm.proto",
}

func init() { proto.RegisterFile("github.com/micro/slack-srv/proto/rtm/rtm.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x6d, 0x4a, 0xc5, 0x0e, 0xad, 0x87, 0x45, 0x24, 0x08, 0x82, 0x44, 0x05, 0x2f, 0x4e,
	0x40, 0xf1, 0x01, 0xbc, 0x7b, 0x8a, 0xe8, 0x4d, 0xc2, 0x36, 0x2e, 0x35, 0x24, 0x9b, 0x49, 0x67,
	0x26, 0xf5, 0xf5, 0x65, 0x77, 0x7b, 0xf0, 0x20, 0x78, 0xd8, 0xc3, 0x7c, 0xf3, 0xed, 0xce, 0xfe,
	0x03, 0xb8, 0x6d, 0xf5, 0x6b, 0xda, 0x60, 0x43, 0xbe, 0xf4, 0x6d, 0xc3, 0x54, 0x4a, 0x6f, 0x9b,
	0xee, 0x5e, 0x78, 0x5f, 0x8e, 0x4c, 0x4a, 0x25, 0xab, 0x0f, 0x07, 0x63, 0x65, 0xce, 0xb7, 0x84,
	0xd1, 0x43, 0xe1, 0x3d, 0x46, 0x17, 0x59, 0x7d, 0xb1, 0x83, 0xd5, 0xab, 0x5a, 0xd6, 0xca, 0xed,
	0x26, 0x27, 0x6a, 0xae, 0x61, 0x2d, 0xad, 0x1f, 0x7b, 0x57, 0xf7, 0x56, 0x9d, 0x68, 0x3e, 0xbb,
	0x9a, 0xdd, 0x9d, 0x54, 0xab, 0x04, 0x5f, 0x22, 0x33, 0x97, 0x00, 0x03, 0xd5, 0xd3, 0xc0, 0xce,
	0x7e, 0x4a, 0x9e, 0x45, 0x63, 0x39, 0xd0, 0x5b, 0x02, 0xa1, 0xed, 0xc7, 0xd6, 0xd7, 0xf6, 0xdb,
	0xb2, 0xcb, 0xe7, 0xa9, 0x1d, 0xc8, 0x73, 0x00, 0xc5, 0x13, 0xac, 0x0f, 0x23, 0x65, 0xa4, 0x41,
	0x9c, 0x39, 0x85, 0x8c, 0xba, 0xc3, 0xa0, 0x8c, 0x3a, 0x73, 0x06, 0x0b, 0xc7, 0x4c, 0x1c, 0x5f,
	0x5e, 0x56, 0xa9, 0x78, 0xf8, 0x80, 0x79, 0xa5, 0xde, 0xbc, 0xc3, 0x22, 0xde, 0x36, 0x37, 0xf8,
	0x77, 0x24, 0xfc, 0x9d, 0xe7, 0xe2, 0xf6, 0x1f, 0x2b, 0x7d, 0xa1, 0x38, 0xda, 0x1c, 0xc7, 0x3d,
	0x3d, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x22, 0x91, 0xd7, 0xb9, 0x59, 0x01, 0x00, 0x00,
}
