// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/micro/slack-srv/proto/im/im.proto

/*
Package go_micro_srv_slack_im is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/slack-srv/proto/im/im.proto

It has these top-level messages:
	Im
	Channel
	CloseRequest
	CloseResponse
	HistoryRequest
	HistoryResponse
	ListRequest
	ListResponse
	MarkRequest
	MarkResponse
	OpenRequest
	OpenResponse
*/
package go_micro_srv_slack_im

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_micro_srv_slack "github.com/micro/slack-srv/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Im struct {
	Id            string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	IsIm          bool   `protobuf:"varint,2,opt,name=is_im,json=isIm" json:"is_im,omitempty"`
	User          string `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Created       int64  `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
	IsUserDeleted bool   `protobuf:"varint,5,opt,name=is_user_deleted,json=isUserDeleted" json:"is_user_deleted,omitempty"`
}

func (m *Im) Reset()                    { *m = Im{} }
func (m *Im) String() string            { return proto.CompactTextString(m) }
func (*Im) ProtoMessage()               {}
func (*Im) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Im) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Im) GetIsIm() bool {
	if m != nil {
		return m.IsIm
	}
	return false
}

func (m *Im) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Im) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Im) GetIsUserDeleted() bool {
	if m != nil {
		return m.IsUserDeleted
	}
	return false
}

type Channel struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Channel) Reset()                    { *m = Channel{} }
func (m *Channel) String() string            { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()               {}
func (*Channel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Channel) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CloseRequest struct {
	Channel string `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *CloseRequest) Reset()                    { *m = CloseRequest{} }
func (m *CloseRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseRequest) ProtoMessage()               {}
func (*CloseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CloseRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

type CloseResponse struct {
	Ok            bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error         string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	NoOp          bool   `protobuf:"varint,3,opt,name=no_op,json=noOp" json:"no_op,omitempty"`
	AlreadyClosed bool   `protobuf:"varint,4,opt,name=already_closed,json=alreadyClosed" json:"already_closed,omitempty"`
}

func (m *CloseResponse) Reset()                    { *m = CloseResponse{} }
func (m *CloseResponse) String() string            { return proto.CompactTextString(m) }
func (*CloseResponse) ProtoMessage()               {}
func (*CloseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CloseResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *CloseResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *CloseResponse) GetNoOp() bool {
	if m != nil {
		return m.NoOp
	}
	return false
}

func (m *CloseResponse) GetAlreadyClosed() bool {
	if m != nil {
		return m.AlreadyClosed
	}
	return false
}

type HistoryRequest struct {
	Channel   string  `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Latest    float64 `protobuf:"fixed64,2,opt,name=latest" json:"latest,omitempty"`
	Oldest    float64 `protobuf:"fixed64,3,opt,name=oldest" json:"oldest,omitempty"`
	Inclusive int64   `protobuf:"varint,4,opt,name=inclusive" json:"inclusive,omitempty"`
	Count     int64   `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	Unreads   int64   `protobuf:"varint,6,opt,name=unreads" json:"unreads,omitempty"`
}

func (m *HistoryRequest) Reset()                    { *m = HistoryRequest{} }
func (m *HistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*HistoryRequest) ProtoMessage()               {}
func (*HistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HistoryRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *HistoryRequest) GetLatest() float64 {
	if m != nil {
		return m.Latest
	}
	return 0
}

func (m *HistoryRequest) GetOldest() float64 {
	if m != nil {
		return m.Oldest
	}
	return 0
}

func (m *HistoryRequest) GetInclusive() int64 {
	if m != nil {
		return m.Inclusive
	}
	return 0
}

func (m *HistoryRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *HistoryRequest) GetUnreads() int64 {
	if m != nil {
		return m.Unreads
	}
	return 0
}

type HistoryResponse struct {
	Ok       bool                          `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error    string                        `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Latest   string                        `protobuf:"bytes,3,opt,name=latest" json:"latest,omitempty"`
	Messages []*go_micro_srv_slack.Message `protobuf:"bytes,4,rep,name=messages" json:"messages,omitempty"`
	HasMore  bool                          `protobuf:"varint,5,opt,name=has_more,json=hasMore" json:"has_more,omitempty"`
}

func (m *HistoryResponse) Reset()                    { *m = HistoryResponse{} }
func (m *HistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*HistoryResponse) ProtoMessage()               {}
func (*HistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HistoryResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *HistoryResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *HistoryResponse) GetLatest() string {
	if m != nil {
		return m.Latest
	}
	return ""
}

func (m *HistoryResponse) GetMessages() []*go_micro_srv_slack.Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *HistoryResponse) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

type ListRequest struct {
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ListResponse struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Ims   []*Im  `protobuf:"bytes,3,rep,name=ims" json:"ims,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ListResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ListResponse) GetIms() []*Im {
	if m != nil {
		return m.Ims
	}
	return nil
}

type MarkRequest struct {
	Channel string  `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Ts      float64 `protobuf:"fixed64,2,opt,name=ts" json:"ts,omitempty"`
}

func (m *MarkRequest) Reset()                    { *m = MarkRequest{} }
func (m *MarkRequest) String() string            { return proto.CompactTextString(m) }
func (*MarkRequest) ProtoMessage()               {}
func (*MarkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MarkRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *MarkRequest) GetTs() float64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

type MarkResponse struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *MarkResponse) Reset()                    { *m = MarkResponse{} }
func (m *MarkResponse) String() string            { return proto.CompactTextString(m) }
func (*MarkResponse) ProtoMessage()               {}
func (*MarkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MarkResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *MarkResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type OpenRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *OpenRequest) Reset()                    { *m = OpenRequest{} }
func (m *OpenRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenRequest) ProtoMessage()               {}
func (*OpenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *OpenRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type OpenResponse struct {
	Ok          bool     `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error       string   `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Channel     *Channel `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
	NoOp        bool     `protobuf:"varint,4,opt,name=no_op,json=noOp" json:"no_op,omitempty"`
	AlreadyOpen bool     `protobuf:"varint,5,opt,name=already_open,json=alreadyOpen" json:"already_open,omitempty"`
}

func (m *OpenResponse) Reset()                    { *m = OpenResponse{} }
func (m *OpenResponse) String() string            { return proto.CompactTextString(m) }
func (*OpenResponse) ProtoMessage()               {}
func (*OpenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *OpenResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *OpenResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *OpenResponse) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *OpenResponse) GetNoOp() bool {
	if m != nil {
		return m.NoOp
	}
	return false
}

func (m *OpenResponse) GetAlreadyOpen() bool {
	if m != nil {
		return m.AlreadyOpen
	}
	return false
}

func init() {
	proto.RegisterType((*Im)(nil), "go.micro.srv.slack.im.Im")
	proto.RegisterType((*Channel)(nil), "go.micro.srv.slack.im.Channel")
	proto.RegisterType((*CloseRequest)(nil), "go.micro.srv.slack.im.CloseRequest")
	proto.RegisterType((*CloseResponse)(nil), "go.micro.srv.slack.im.CloseResponse")
	proto.RegisterType((*HistoryRequest)(nil), "go.micro.srv.slack.im.HistoryRequest")
	proto.RegisterType((*HistoryResponse)(nil), "go.micro.srv.slack.im.HistoryResponse")
	proto.RegisterType((*ListRequest)(nil), "go.micro.srv.slack.im.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "go.micro.srv.slack.im.ListResponse")
	proto.RegisterType((*MarkRequest)(nil), "go.micro.srv.slack.im.MarkRequest")
	proto.RegisterType((*MarkResponse)(nil), "go.micro.srv.slack.im.MarkResponse")
	proto.RegisterType((*OpenRequest)(nil), "go.micro.srv.slack.im.OpenRequest")
	proto.RegisterType((*OpenResponse)(nil), "go.micro.srv.slack.im.OpenResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IM service

type IMClient interface {
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error)
	History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Mark(ctx context.Context, in *MarkRequest, opts ...grpc.CallOption) (*MarkResponse, error)
	Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error)
}

type iMClient struct {
	cc *grpc.ClientConn
}

func NewIMClient(cc *grpc.ClientConn) IMClient {
	return &iMClient{cc}
}

func (c *iMClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error) {
	out := new(CloseResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.im.IM/Close", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMClient) History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	out := new(HistoryResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.im.IM/History", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.im.IM/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMClient) Mark(ctx context.Context, in *MarkRequest, opts ...grpc.CallOption) (*MarkResponse, error) {
	out := new(MarkResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.im.IM/Mark", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMClient) Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error) {
	out := new(OpenResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.slack.im.IM/Open", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IM service

type IMServer interface {
	Close(context.Context, *CloseRequest) (*CloseResponse, error)
	History(context.Context, *HistoryRequest) (*HistoryResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Mark(context.Context, *MarkRequest) (*MarkResponse, error)
	Open(context.Context, *OpenRequest) (*OpenResponse, error)
}

func RegisterIMServer(s *grpc.Server, srv IMServer) {
	s.RegisterService(&_IM_serviceDesc, srv)
}

func _IM_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.im.IM/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IM_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.im.IM/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMServer).History(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IM_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.im.IM/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IM_Mark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMServer).Mark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.im.IM/Mark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMServer).Mark(ctx, req.(*MarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IM_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.slack.im.IM/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMServer).Open(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.srv.slack.im.IM",
	HandlerType: (*IMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Close",
			Handler:    _IM_Close_Handler,
		},
		{
			MethodName: "History",
			Handler:    _IM_History_Handler,
		},
		{
			MethodName: "List",
			Handler:    _IM_List_Handler,
		},
		{
			MethodName: "Mark",
			Handler:    _IM_Mark_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _IM_Open_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/micro/slack-srv/proto/im/im.proto",
}

func init() { proto.RegisterFile("github.com/micro/slack-srv/proto/im/im.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 637 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4b, 0x6b, 0xdb, 0x4c,
	0x14, 0x8d, 0x1e, 0x8e, 0x9d, 0xeb, 0x47, 0x60, 0xbe, 0x07, 0x8a, 0x5b, 0x8a, 0x33, 0x69, 0x82,
	0xa1, 0x8d, 0x0c, 0x69, 0x21, 0xdd, 0xa7, 0x8b, 0x1a, 0x6a, 0x42, 0x45, 0xbb, 0xe9, 0xc6, 0x28,
	0xd2, 0x10, 0x0f, 0xd6, 0x68, 0x9c, 0xb9, 0x72, 0x20, 0xab, 0xfe, 0x98, 0x42, 0xe9, 0xae, 0x7f,
	0xb1, 0xcc, 0x8c, 0x6c, 0xab, 0x25, 0x8a, 0xf1, 0x4e, 0xf7, 0x72, 0xe6, 0xdc, 0x73, 0x1f, 0x47,
	0xf0, 0xfa, 0x96, 0x17, 0xb3, 0xe5, 0x4d, 0x98, 0x48, 0x31, 0x12, 0x3c, 0x51, 0x72, 0x84, 0x59,
	0x9c, 0xcc, 0xcf, 0x51, 0xdd, 0x8f, 0x16, 0x4a, 0x16, 0x72, 0xc4, 0xc5, 0x88, 0x8b, 0xd0, 0x7c,
	0x93, 0xff, 0x6e, 0x65, 0x68, 0x50, 0x21, 0xaa, 0xfb, 0xd0, 0x20, 0x43, 0x2e, 0xfa, 0xe7, 0x5b,
	0x49, 0x12, 0x29, 0x84, 0xcc, 0x2d, 0x0b, 0xfd, 0x06, 0xee, 0x58, 0x90, 0x1e, 0xb8, 0x3c, 0x0d,
	0x9c, 0x81, 0x33, 0x3c, 0x88, 0x5c, 0x9e, 0x92, 0x7f, 0xa0, 0xc1, 0x71, 0xca, 0x45, 0xe0, 0x0e,
	0x9c, 0x61, 0x2b, 0xf2, 0x39, 0x8e, 0x05, 0x21, 0xe0, 0x2f, 0x91, 0xa9, 0xc0, 0x33, 0x30, 0xf3,
	0x4d, 0x02, 0x68, 0x26, 0x8a, 0xc5, 0x05, 0x4b, 0x03, 0x7f, 0xe0, 0x0c, 0xbd, 0x68, 0x15, 0x92,
	0x33, 0x38, 0xe4, 0x38, 0xd5, 0xa0, 0x69, 0xca, 0x32, 0xa6, 0x11, 0x0d, 0x43, 0xd6, 0xe5, 0xf8,
	0x05, 0x99, 0x7a, 0x6f, 0x93, 0xf4, 0x08, 0x9a, 0x57, 0xb3, 0x38, 0xcf, 0x59, 0xf6, 0xb7, 0x0a,
	0x3a, 0x84, 0xce, 0x55, 0x26, 0x91, 0x45, 0xec, 0x6e, 0xc9, 0xb0, 0x30, 0xc5, 0x2c, 0xb4, 0x04,
	0xad, 0x42, 0x7a, 0x07, 0xdd, 0x12, 0x89, 0x0b, 0x99, 0x23, 0xd3, 0x54, 0x72, 0x6e, 0x50, 0xad,
	0xc8, 0x95, 0x73, 0xf2, 0x2f, 0x34, 0x98, 0x52, 0x52, 0x99, 0x86, 0x0e, 0x22, 0x1b, 0xe8, 0x36,
	0x73, 0x39, 0x95, 0x0b, 0xd3, 0x52, 0x2b, 0xf2, 0x73, 0x79, 0xbd, 0x20, 0xa7, 0xd0, 0x8b, 0x33,
	0xc5, 0xe2, 0xf4, 0x61, 0x9a, 0x68, 0x4e, 0xdb, 0x59, 0x2b, 0xea, 0x96, 0x59, 0x53, 0x28, 0xa5,
	0x3f, 0x1d, 0xe8, 0x7d, 0xe0, 0x58, 0x48, 0xf5, 0xb0, 0x55, 0x1f, 0xf9, 0x1f, 0xf6, 0xb3, 0xb8,
	0x60, 0x58, 0x98, 0xfa, 0x4e, 0x54, 0x46, 0x3a, 0x2f, 0xb3, 0x54, 0xe7, 0x3d, 0x9b, 0xb7, 0x11,
	0x79, 0x0e, 0x07, 0x3c, 0x4f, 0xb2, 0x25, 0xf2, 0x7b, 0x56, 0x0e, 0x76, 0x93, 0xd0, 0xcd, 0x24,
	0x72, 0x99, 0x17, 0x66, 0xa0, 0x5e, 0x64, 0x03, 0x5d, 0x7d, 0x99, 0x6b, 0x85, 0x18, 0xec, 0xdb,
	0x55, 0x94, 0x21, 0xfd, 0xee, 0xc0, 0xe1, 0x5a, 0xea, 0x4e, 0x03, 0xda, 0xe8, 0xb6, 0x4b, 0x5f,
	0xe9, 0xbe, 0x84, 0x96, 0x60, 0x88, 0xf1, 0x2d, 0xc3, 0xc0, 0x1f, 0x78, 0xc3, 0xf6, 0xc5, 0xb3,
	0xf0, 0x91, 0x73, 0x9c, 0x58, 0x4c, 0xb4, 0x06, 0x93, 0x23, 0x68, 0xcd, 0x62, 0x9c, 0x0a, 0xa9,
	0x58, 0x79, 0x0e, 0xcd, 0x59, 0x8c, 0x13, 0xa9, 0x18, 0xed, 0x42, 0xfb, 0x23, 0xc7, 0xa2, 0x1c,
	0x26, 0x8d, 0xa1, 0x63, 0xc3, 0x9d, 0x04, 0xbf, 0x02, 0x8f, 0x0b, 0x0c, 0x3c, 0xa3, 0xe9, 0x28,
	0x7c, 0xd4, 0x22, 0xe1, 0x58, 0x44, 0x1a, 0x45, 0x2f, 0xa1, 0x3d, 0x89, 0xd5, 0x7c, 0xfb, 0xfa,
	0x7a, 0xe0, 0x16, 0x58, 0xae, 0xce, 0x2d, 0x90, 0xbe, 0x85, 0x8e, 0x7d, 0xb8, 0x8b, 0x36, 0x7a,
	0x0c, 0xed, 0xeb, 0x05, 0xcb, 0x57, 0xe5, 0x56, 0x76, 0x72, 0x36, 0x76, 0xa2, 0x3f, 0x1c, 0xe8,
	0x58, 0xcc, 0x4e, 0x5d, 0xbf, 0xdb, 0x28, 0xd7, 0x7b, 0x6a, 0x5f, 0xbc, 0xa8, 0xe9, 0xbc, 0x74,
	0xda, 0xa6, 0xb3, 0xb5, 0x03, 0xfc, 0x8a, 0x03, 0x8e, 0xa1, 0xb3, 0x72, 0x80, 0x5c, 0xb0, 0xbc,
	0x5c, 0x54, 0xbb, 0xcc, 0x69, 0x7d, 0x17, 0xbf, 0x3c, 0x70, 0xc7, 0x13, 0xf2, 0x19, 0x1a, 0xc6,
	0x0e, 0xe4, 0xa4, 0xae, 0x60, 0xc5, 0xbf, 0xfd, 0x97, 0x4f, 0x83, 0x6c, 0xcb, 0x74, 0x8f, 0x7c,
	0x85, 0x66, 0x79, 0xae, 0xe4, 0xb4, 0xe6, 0xc9, 0x9f, 0xce, 0xeb, 0x9f, 0x6d, 0x83, 0xad, 0xb9,
	0x3f, 0x81, 0xaf, 0xcf, 0x8a, 0xd0, 0x9a, 0x17, 0x95, 0x13, 0xec, 0x9f, 0x3c, 0x89, 0xa9, 0x52,
	0xea, 0x6b, 0xa8, 0xa5, 0xac, 0xdc, 0x58, 0x2d, 0x65, 0xf5, 0x9c, 0x2c, 0xa5, 0x1e, 0x73, 0x2d,
	0x65, 0xe5, 0x8e, 0x6a, 0x29, 0xab, 0x77, 0x44, 0xf7, 0x6e, 0xf6, 0xcd, 0xff, 0xfe, 0xcd, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x91, 0x13, 0x38, 0x79, 0x65, 0x06, 0x00, 0x00,
}
